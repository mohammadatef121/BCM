
BCM_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000f92  00001026  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000057  00800074  00800074  0000103a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000103a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f21  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe5  00000000  00000000  00003219  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000183b  00000000  00000000  000041fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000624  00000000  00000000  00005a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be7  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014ca  00000000  00000000  00006c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00008111  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__vector_5>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 c1 02 	jmp	0x582	; 0x582 <__vector_9>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_11>
  30:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_12>
  34:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_13>
  38:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_14>
  3c:	0c 94 13 03 	jmp	0x626	; 0x626 <__vector_15>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	49 02       	muls	r20, r25
  56:	4d 02       	muls	r20, r29
  58:	51 02       	muls	r21, r17
  5a:	51 02       	muls	r21, r17
  5c:	55 02       	muls	r21, r21
  5e:	55 02       	muls	r21, r21
  60:	59 02       	muls	r21, r25

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e2 e9       	ldi	r30, 0x92	; 146
  76:	ff e0       	ldi	r31, 0x0F	; 15
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a4 37       	cpi	r26, 0x74	; 116
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a4 e7       	ldi	r26, 0x74	; 116
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	ab 3c       	cpi	r26, 0xCB	; 203
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 5d 00 	call	0xba	; 0xba <main>
  98:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <a7a>:
#include "Sleep.h"
#include "TMU.h"

void a7a (void)
{
	PORTA_DIR|=0x40;
  a0:	d6 9a       	sbi	0x1a, 6	; 26
	PORTA_DATA|=0x40;
  a2:	de 9a       	sbi	0x1b, 6	; 27
  a4:	08 95       	ret

000000a6 <cbk2.1798>:
		DIO_Toggle(GPIOA,BIT0);
	}

	void cbk2(void)
	{
		DIO_Toggle(GPIOA,BIT1);
  a6:	62 e0       	ldi	r22, 0x02	; 2
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Toggle>
  ae:	08 95       	ret

000000b0 <cbk1.1795>:

void main(void)
{
	void cbk1(void)
	{
		DIO_Toggle(GPIOA,BIT0);
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 04 01 	call	0x208	; 0x208 <DIO_Toggle>
  b8:	08 95       	ret

000000ba <main>:
	PORTA_DATA|=0x40;
}


void main(void)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	66 97       	sbiw	r28, 0x16	; 22
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
	void cbk3(void)
	{
		DIO_Toggle(GPIOA,BIT2);
	}
	
	TMU_Init();
  ce:	0e 94 20 06 	call	0xc40	; 0xc40 <TMU_Init>
		
	TMU_Task_cfg_t TMU0;
	TMU0.current_time=0;
  d2:	1a 82       	std	Y+2, r1	; 0x02
	TMU0.Period_Time=1;
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	1b 83       	std	Y+3, r17	; 0x03
	TMU0.ptrfu_Timer_Cbk=cbk1;
  d8:	88 e5       	ldi	r24, 0x58	; 88
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	9d 83       	std	Y+5, r25	; 0x05
  de:	8c 83       	std	Y+4, r24	; 0x04
	TMU0.Repetition=PERIODIC;
  e0:	19 82       	std	Y+1, r1	; 0x01
	TMU_Start(&TMU0);
  e2:	ce 01       	movw	r24, r28
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TMU_Start>
		
	TMU_Task_cfg_t TMU2;
	TMU2.current_time=0;
  ea:	1f 82       	std	Y+7, r1	; 0x07
	TMU2.Period_Time=1;
  ec:	18 87       	std	Y+8, r17	; 0x08
	TMU2.ptrfu_Timer_Cbk=cbk2;
  ee:	83 e5       	ldi	r24, 0x53	; 83
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	9a 87       	std	Y+10, r25	; 0x0a
  f4:	89 87       	std	Y+9, r24	; 0x09
	TMU2.Repetition=PERIODIC;
  f6:	1e 82       	std	Y+6, r1	; 0x06
	TMU_Start(&TMU2);
  f8:	ce 01       	movw	r24, r28
  fa:	06 96       	adiw	r24, 0x06	; 6
  fc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TMU_Start>
	//TMU3.ptrfu_Timer_Cbk=cbk3;
	//TMU3.Repetition=PERIODIC;
	//TMU_Start(&TMU3);


	PORTA_DIR |= 0x40;
 100:	d6 9a       	sbi	0x1a, 6	; 26
	BCM_Init();
 102:	0e 94 b8 04 	call	0x970	; 0x970 <BCM_Init>
	GIE();
 106:	8f b7       	in	r24, 0x3f	; 63
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8f bf       	out	0x3f, r24	; 63
	uint8 array[12]="MohammadAtef";
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	e6 e6       	ldi	r30, 0x66	; 102
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	de 01       	movw	r26, r28
 114:	1b 96       	adiw	r26, 0x0b	; 11
 116:	01 90       	ld	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	8a 95       	dec	r24
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x5c>
	BCM_Setup_Receive(array,12,a7a);
 11e:	40 e5       	ldi	r20, 0x50	; 80
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	6c e0       	ldi	r22, 0x0C	; 12
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	ce 01       	movw	r24, r28
 128:	0b 96       	adiw	r24, 0x0b	; 11
 12a:	0e 94 27 05 	call	0xa4e	; 0xa4e <BCM_Setup_Receive>
	Sleep_Init();
 12e:	0e 94 22 01 	call	0x244	; 0x244 <Sleep_Init>
	PORTA_DIR|=0xFF;
 132:	8a b3       	in	r24, 0x1a	; 26
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8a bb       	out	0x1a, r24	; 26
	while(1)
	{
		PORTA_DATA|=0x80;
 138:	df 9a       	sbi	0x1b, 7	; 27
		TMU_Dispatcher();
 13a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <TMU_Dispatcher>
		//BCM_TxDispatcher();
		BCM_RxDispatcher();
 13e:	0e 94 57 05 	call	0xaae	; 0xaae <BCM_RxDispatcher>
		PORTA_DATA&=~(0x80);
 142:	df 98       	cbi	0x1b, 7	; 27
		Sleep_Start(Idle);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 27 01 	call	0x24e	; 0x24e <Sleep_Start>
 14c:	f5 cf       	rjmp	.-22     	; 0x138 <main+0x7e>

0000014e <DIO_init>:
			return E_NOK;
			break;
		}	
	}
	return E_OK;
}
 14e:	fc 01       	movw	r30, r24
 150:	89 2b       	or	r24, r25
 152:	09 f4       	brne	.+2      	; 0x156 <DIO_init+0x8>
 154:	4f c0       	rjmp	.+158    	; 0x1f4 <DIO_init+0xa6>
 156:	80 81       	ld	r24, Z
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	c1 f0       	breq	.+48     	; 0x18c <DIO_init+0x3e>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_init+0x1a>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	39 f1       	breq	.+78     	; 0x1b0 <DIO_init+0x62>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	b1 f1       	breq	.+108    	; 0x1d2 <DIO_init+0x84>
 166:	48 c0       	rjmp	.+144    	; 0x1f8 <DIO_init+0xaa>
 168:	32 81       	ldd	r19, Z+2	; 0x02
 16a:	33 23       	and	r19, r19
 16c:	41 f0       	breq	.+16     	; 0x17e <DIO_init+0x30>
 16e:	3f 3f       	cpi	r19, 0xFF	; 255
 170:	09 f0       	breq	.+2      	; 0x174 <DIO_init+0x26>
 172:	44 c0       	rjmp	.+136    	; 0x1fc <DIO_init+0xae>
 174:	2a b3       	in	r18, 0x1a	; 26
 176:	91 81       	ldd	r25, Z+1	; 0x01
 178:	92 2b       	or	r25, r18
 17a:	9a bb       	out	0x1a, r25	; 26
 17c:	08 95       	ret
 17e:	2a b3       	in	r18, 0x1a	; 26
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	90 95       	com	r25
 184:	92 23       	and	r25, r18
 186:	9a bb       	out	0x1a, r25	; 26
 188:	83 2f       	mov	r24, r19
 18a:	08 95       	ret
 18c:	32 81       	ldd	r19, Z+2	; 0x02
 18e:	33 23       	and	r19, r19
 190:	41 f0       	breq	.+16     	; 0x1a2 <DIO_init+0x54>
 192:	3f 3f       	cpi	r19, 0xFF	; 255
 194:	c1 f5       	brne	.+112    	; 0x206 <DIO_init+0xb8>
 196:	97 b3       	in	r25, 0x17	; 23
 198:	81 81       	ldd	r24, Z+1	; 0x01
 19a:	89 2b       	or	r24, r25
 19c:	87 bb       	out	0x17, r24	; 23
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret
 1a2:	27 b3       	in	r18, 0x17	; 23
 1a4:	91 81       	ldd	r25, Z+1	; 0x01
 1a6:	90 95       	com	r25
 1a8:	92 23       	and	r25, r18
 1aa:	97 bb       	out	0x17, r25	; 23
 1ac:	83 2f       	mov	r24, r19
 1ae:	08 95       	ret
 1b0:	82 81       	ldd	r24, Z+2	; 0x02
 1b2:	88 23       	and	r24, r24
 1b4:	41 f0       	breq	.+16     	; 0x1c6 <DIO_init+0x78>
 1b6:	8f 3f       	cpi	r24, 0xFF	; 255
 1b8:	19 f5       	brne	.+70     	; 0x200 <DIO_init+0xb2>
 1ba:	94 b3       	in	r25, 0x14	; 20
 1bc:	81 81       	ldd	r24, Z+1	; 0x01
 1be:	89 2b       	or	r24, r25
 1c0:	84 bb       	out	0x14, r24	; 20
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret
 1c6:	24 b3       	in	r18, 0x14	; 20
 1c8:	91 81       	ldd	r25, Z+1	; 0x01
 1ca:	90 95       	com	r25
 1cc:	92 23       	and	r25, r18
 1ce:	94 bb       	out	0x14, r25	; 20
 1d0:	08 95       	ret
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	88 23       	and	r24, r24
 1d6:	41 f0       	breq	.+16     	; 0x1e8 <DIO_init+0x9a>
 1d8:	8f 3f       	cpi	r24, 0xFF	; 255
 1da:	a1 f4       	brne	.+40     	; 0x204 <DIO_init+0xb6>
 1dc:	9a b3       	in	r25, 0x1a	; 26
 1de:	81 81       	ldd	r24, Z+1	; 0x01
 1e0:	89 2b       	or	r24, r25
 1e2:	8a bb       	out	0x1a, r24	; 26
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	08 95       	ret
 1e8:	24 b3       	in	r18, 0x14	; 20
 1ea:	91 81       	ldd	r25, Z+1	; 0x01
 1ec:	90 95       	com	r25
 1ee:	92 23       	and	r25, r18
 1f0:	94 bb       	out	0x14, r25	; 20
 1f2:	08 95       	ret
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	08 95       	ret
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	08 95       	ret
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	08 95       	ret
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	08 95       	ret
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	08 95       	ret

00000208 <DIO_Toggle>:

ERROR_STATUS DIO_Toggle (uint8 GPIO, uint8 pins)
{
	switch (GPIO)
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	59 f0       	breq	.+22     	; 0x222 <DIO_Toggle+0x1a>
 20c:	28 f0       	brcs	.+10     	; 0x218 <DIO_Toggle+0x10>
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	69 f0       	breq	.+26     	; 0x22c <DIO_Toggle+0x24>
 212:	83 30       	cpi	r24, 0x03	; 3
 214:	81 f0       	breq	.+32     	; 0x236 <DIO_Toggle+0x2e>
 216:	14 c0       	rjmp	.+40     	; 0x240 <DIO_Toggle+0x38>
	{
		case GPIOA:
		PORTA_DATA^=pins;
 218:	8b b3       	in	r24, 0x1b	; 27
 21a:	68 27       	eor	r22, r24
 21c:	6b bb       	out	0x1b, r22	; 27
//------------------------------------------------------------------------------------------------------//
		default:
		return E_NOK;
		break;
	}
	return E_OK;
 21e:	80 e0       	ldi	r24, 0x00	; 0
{
	switch (GPIO)
	{
		case GPIOA:
		PORTA_DATA^=pins;
		break;
 220:	08 95       	ret
//------------------------------------------------------------------------------------------------------//
		case GPIOB:
		PORTB_DATA^=pins;
 222:	88 b3       	in	r24, 0x18	; 24
 224:	68 27       	eor	r22, r24
 226:	68 bb       	out	0x18, r22	; 24
//------------------------------------------------------------------------------------------------------//
		default:
		return E_NOK;
		break;
	}
	return E_OK;
 228:	80 e0       	ldi	r24, 0x00	; 0
		PORTA_DATA^=pins;
		break;
//------------------------------------------------------------------------------------------------------//
		case GPIOB:
		PORTB_DATA^=pins;
		break;
 22a:	08 95       	ret
//------------------------------------------------------------------------------------------------------//
		case GPIOC:
		PORTC_DATA^=pins;
 22c:	85 b3       	in	r24, 0x15	; 21
 22e:	68 27       	eor	r22, r24
 230:	65 bb       	out	0x15, r22	; 21
//------------------------------------------------------------------------------------------------------//
		default:
		return E_NOK;
		break;
	}
	return E_OK;
 232:	80 e0       	ldi	r24, 0x00	; 0
		PORTB_DATA^=pins;
		break;
//------------------------------------------------------------------------------------------------------//
		case GPIOC:
		PORTC_DATA^=pins;
		break;
 234:	08 95       	ret
//------------------------------------------------------------------------------------------------------//
		case GPIOD:
		PORTD_DATA^=pins;
 236:	82 b3       	in	r24, 0x12	; 18
 238:	68 27       	eor	r22, r24
 23a:	62 bb       	out	0x12, r22	; 18
//------------------------------------------------------------------------------------------------------//
		default:
		return E_NOK;
		break;
	}
	return E_OK;
 23c:	80 e0       	ldi	r24, 0x00	; 0
		PORTC_DATA^=pins;
		break;
//------------------------------------------------------------------------------------------------------//
		case GPIOD:
		PORTD_DATA^=pins;
		break;
 23e:	08 95       	ret
//------------------------------------------------------------------------------------------------------//
		default:
		return E_NOK;
 240:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return E_OK;
 242:	08 95       	ret

00000244 <Sleep_Init>:
#include "Sleep.h"
#include "registers.h"

ERROR_STATUS Sleep_Init()
{
	MCUCR|=(1<<7);
 244:	85 b7       	in	r24, 0x35	; 53
 246:	80 68       	ori	r24, 0x80	; 128
 248:	85 bf       	out	0x35, r24	; 53
	return E_OK;
}
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret

0000024e <Sleep_Start>:

ERROR_STATUS Sleep_Start(uint8 Mode)
{
	switch(Mode)
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	a1 f0       	breq	.+40     	; 0x27a <Sleep_Start+0x2c>
 252:	28 f4       	brcc	.+10     	; 0x25e <Sleep_Start+0x10>
 254:	88 23       	and	r24, r24
 256:	51 f0       	breq	.+20     	; 0x26c <Sleep_Start+0x1e>
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	59 f0       	breq	.+22     	; 0x272 <Sleep_Start+0x24>
 25c:	20 c0       	rjmp	.+64     	; 0x29e <Sleep_Start+0x50>
 25e:	86 30       	cpi	r24, 0x06	; 6
 260:	a1 f0       	breq	.+40     	; 0x28a <Sleep_Start+0x3c>
 262:	87 30       	cpi	r24, 0x07	; 7
 264:	b1 f0       	breq	.+44     	; 0x292 <Sleep_Start+0x44>
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	d1 f4       	brne	.+52     	; 0x29e <Sleep_Start+0x50>
 26a:	0b c0       	rjmp	.+22     	; 0x282 <Sleep_Start+0x34>
	{
		case Idle:
		MCUCR|=Idle;
 26c:	85 b7       	in	r24, 0x35	; 53
 26e:	85 bf       	out	0x35, r24	; 53
		break;
 270:	13 c0       	rjmp	.+38     	; 0x298 <Sleep_Start+0x4a>
		
		case ADC_Noise_Reduction:
		MCUCR|=ADC_Noise_Reduction;
 272:	85 b7       	in	r24, 0x35	; 53
 274:	81 60       	ori	r24, 0x01	; 1
 276:	85 bf       	out	0x35, r24	; 53
		break;
 278:	0f c0       	rjmp	.+30     	; 0x298 <Sleep_Start+0x4a>
		
		case Power_Down:
		MCUCR|=Power_Down;
 27a:	85 b7       	in	r24, 0x35	; 53
 27c:	82 60       	ori	r24, 0x02	; 2
 27e:	85 bf       	out	0x35, r24	; 53
		break;
 280:	0b c0       	rjmp	.+22     	; 0x298 <Sleep_Start+0x4a>
		
		case Power_Save:
		MCUCR|=Power_Save;
 282:	85 b7       	in	r24, 0x35	; 53
 284:	83 60       	ori	r24, 0x03	; 3
 286:	85 bf       	out	0x35, r24	; 53
		break;
 288:	07 c0       	rjmp	.+14     	; 0x298 <Sleep_Start+0x4a>
		
		case Standby:
		MCUCR|=Standby;
 28a:	85 b7       	in	r24, 0x35	; 53
 28c:	86 60       	ori	r24, 0x06	; 6
 28e:	85 bf       	out	0x35, r24	; 53
		break;
 290:	03 c0       	rjmp	.+6      	; 0x298 <Sleep_Start+0x4a>

		case Extended_Standby:
		MCUCR|=Extended_Standby;
 292:	85 b7       	in	r24, 0x35	; 53
 294:	87 60       	ori	r24, 0x07	; 7
 296:	85 bf       	out	0x35, r24	; 53
		default:
		return E_NOK;
		break;	
	}
	
	asm ("SLEEP");
 298:	88 95       	sleep
	return E_OK;
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	08 95       	ret
		case Extended_Standby:
		MCUCR|=Extended_Standby;
		break;	
		
		default:
		return E_NOK;
 29e:	81 e0       	ldi	r24, 0x01	; 1
		break;	
	}
	
	asm ("SLEEP");
	return E_OK;
}
 2a0:	08 95       	ret

000002a2 <__vector_12>:
    *u8_Data = GET_BIT(SPSR, SPIF);
    return E_OK;
}

ISR (SPI_COMPLETE_Vect)
{
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
    CBK_SPI_Interrupt();
 2c4:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 2c8:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 2cc:	09 95       	icall
}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <Timer_Init>:
		default:
		return E_NOK;
		break;
	}
	return E_OK;
}
 2f0:	dc 01       	movw	r26, r24
 2f2:	8c 91       	ld	r24, X
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	09 f4       	brne	.+2      	; 0x2fa <Timer_Init+0xa>
 2f8:	51 c0       	rjmp	.+162    	; 0x39c <Timer_Init+0xac>
 2fa:	20 f0       	brcs	.+8      	; 0x304 <Timer_Init+0x14>
 2fc:	82 30       	cpi	r24, 0x02	; 2
 2fe:	09 f4       	brne	.+2      	; 0x302 <Timer_Init+0x12>
 300:	ad c0       	rjmp	.+346    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 302:	e7 c0       	rjmp	.+462    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 304:	14 96       	adiw	r26, 0x04	; 4
 306:	2d 91       	ld	r18, X+
 308:	3c 91       	ld	r19, X
 30a:	15 97       	sbiw	r26, 0x05	; 5
 30c:	30 93 7b 00 	sts	0x007B, r19	; 0x80007b <sga_Timer0CBF+0x1>
 310:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <sga_Timer0CBF>
 314:	11 96       	adiw	r26, 0x01	; 1
 316:	9c 91       	ld	r25, X
 318:	11 97       	sbiw	r26, 0x01	; 1
 31a:	91 30       	cpi	r25, 0x01	; 1
 31c:	41 f1       	breq	.+80     	; 0x36e <Timer_Init+0x7e>
 31e:	18 f0       	brcs	.+6      	; 0x326 <Timer_Init+0x36>
 320:	92 30       	cpi	r25, 0x02	; 2
 322:	49 f1       	breq	.+82     	; 0x376 <Timer_Init+0x86>
 324:	d8 c0       	rjmp	.+432    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 326:	13 96       	adiw	r26, 0x03	; 3
 328:	9c 91       	ld	r25, X
 32a:	13 97       	sbiw	r26, 0x03	; 3
 32c:	94 30       	cpi	r25, 0x04	; 4
 32e:	99 f0       	breq	.+38     	; 0x356 <Timer_Init+0x66>
 330:	28 f4       	brcc	.+10     	; 0x33c <Timer_Init+0x4c>
 332:	91 30       	cpi	r25, 0x01	; 1
 334:	41 f0       	breq	.+16     	; 0x346 <Timer_Init+0x56>
 336:	92 30       	cpi	r25, 0x02	; 2
 338:	51 f0       	breq	.+20     	; 0x34e <Timer_Init+0x5e>
 33a:	cf c0       	rjmp	.+414    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 33c:	96 30       	cpi	r25, 0x06	; 6
 33e:	79 f0       	breq	.+30     	; 0x35e <Timer_Init+0x6e>
 340:	97 30       	cpi	r25, 0x07	; 7
 342:	89 f0       	breq	.+34     	; 0x366 <Timer_Init+0x76>
 344:	ca c0       	rjmp	.+404    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gsu8_TCCRT0_Prescaler>
 34c:	17 c0       	rjmp	.+46     	; 0x37c <Timer_Init+0x8c>
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gsu8_TCCRT0_Prescaler>
 354:	13 c0       	rjmp	.+38     	; 0x37c <Timer_Init+0x8c>
 356:	93 e0       	ldi	r25, 0x03	; 3
 358:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gsu8_TCCRT0_Prescaler>
 35c:	0f c0       	rjmp	.+30     	; 0x37c <Timer_Init+0x8c>
 35e:	94 e0       	ldi	r25, 0x04	; 4
 360:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gsu8_TCCRT0_Prescaler>
 364:	0b c0       	rjmp	.+22     	; 0x37c <Timer_Init+0x8c>
 366:	95 e0       	ldi	r25, 0x05	; 5
 368:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gsu8_TCCRT0_Prescaler>
 36c:	07 c0       	rjmp	.+14     	; 0x37c <Timer_Init+0x8c>
 36e:	97 e0       	ldi	r25, 0x07	; 7
 370:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gsu8_TCCRT0_Prescaler>
 374:	03 c0       	rjmp	.+6      	; 0x37c <Timer_Init+0x8c>
 376:	96 e0       	ldi	r25, 0x06	; 6
 378:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gsu8_TCCRT0_Prescaler>
 37c:	12 96       	adiw	r26, 0x02	; 2
 37e:	9c 91       	ld	r25, X
 380:	99 23       	and	r25, r25
 382:	19 f0       	breq	.+6      	; 0x38a <Timer_Init+0x9a>
 384:	91 30       	cpi	r25, 0x01	; 1
 386:	31 f0       	breq	.+12     	; 0x394 <Timer_Init+0xa4>
 388:	aa c0       	rjmp	.+340    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 38a:	89 b7       	in	r24, 0x39	; 57
 38c:	8e 7f       	andi	r24, 0xFE	; 254
 38e:	89 bf       	out	0x39, r24	; 57
 390:	89 2f       	mov	r24, r25
 392:	08 95       	ret
 394:	99 b7       	in	r25, 0x39	; 57
 396:	91 60       	ori	r25, 0x01	; 1
 398:	99 bf       	out	0x39, r25	; 57
 39a:	08 95       	ret
 39c:	14 96       	adiw	r26, 0x04	; 4
 39e:	2d 91       	ld	r18, X+
 3a0:	3c 91       	ld	r19, X
 3a2:	15 97       	sbiw	r26, 0x05	; 5
 3a4:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <sga_Timer1CBF+0x1>
 3a8:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <sga_Timer1CBF>
 3ac:	11 96       	adiw	r26, 0x01	; 1
 3ae:	9c 91       	ld	r25, X
 3b0:	11 97       	sbiw	r26, 0x01	; 1
 3b2:	91 30       	cpi	r25, 0x01	; 1
 3b4:	b9 f1       	breq	.+110    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3b6:	18 f0       	brcs	.+6      	; 0x3be <Timer_Init+0xce>
 3b8:	92 30       	cpi	r25, 0x02	; 2
 3ba:	d9 f1       	breq	.+118    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3bc:	08 95       	ret
 3be:	13 96       	adiw	r26, 0x03	; 3
 3c0:	9c 91       	ld	r25, X
 3c2:	13 97       	sbiw	r26, 0x03	; 3
 3c4:	94 30       	cpi	r25, 0x04	; 4
 3c6:	c9 f0       	breq	.+50     	; 0x3fa <Timer_Init+0x10a>
 3c8:	28 f4       	brcc	.+10     	; 0x3d4 <Timer_Init+0xe4>
 3ca:	91 30       	cpi	r25, 0x01	; 1
 3cc:	41 f0       	breq	.+16     	; 0x3de <Timer_Init+0xee>
 3ce:	92 30       	cpi	r25, 0x02	; 2
 3d0:	69 f0       	breq	.+26     	; 0x3ec <Timer_Init+0xfc>
 3d2:	08 95       	ret
 3d4:	96 30       	cpi	r25, 0x06	; 6
 3d6:	c1 f0       	breq	.+48     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3d8:	97 30       	cpi	r25, 0x07	; 7
 3da:	e9 f0       	breq	.+58     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3dc:	08 95       	ret
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	30 93 7e 00 	sts	0x007E, r19	; 0x80007e <gsu16_TCCRT1_Prescaler+0x1>
 3e6:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <gsu16_TCCRT1_Prescaler>
 3ea:	29 c0       	rjmp	.+82     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3ec:	22 e0       	ldi	r18, 0x02	; 2
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	30 93 7e 00 	sts	0x007E, r19	; 0x80007e <gsu16_TCCRT1_Prescaler+0x1>
 3f4:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <gsu16_TCCRT1_Prescaler>
 3f8:	22 c0       	rjmp	.+68     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3fa:	23 e0       	ldi	r18, 0x03	; 3
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	30 93 7e 00 	sts	0x007E, r19	; 0x80007e <gsu16_TCCRT1_Prescaler+0x1>
 402:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <gsu16_TCCRT1_Prescaler>
 406:	1b c0       	rjmp	.+54     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 408:	24 e0       	ldi	r18, 0x04	; 4
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	30 93 7e 00 	sts	0x007E, r19	; 0x80007e <gsu16_TCCRT1_Prescaler+0x1>
 410:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <gsu16_TCCRT1_Prescaler>
 414:	14 c0       	rjmp	.+40     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 416:	25 e0       	ldi	r18, 0x05	; 5
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	30 93 7e 00 	sts	0x007E, r19	; 0x80007e <gsu16_TCCRT1_Prescaler+0x1>
 41e:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <gsu16_TCCRT1_Prescaler>
 422:	0d c0       	rjmp	.+26     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 424:	27 e0       	ldi	r18, 0x07	; 7
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	30 93 7e 00 	sts	0x007E, r19	; 0x80007e <gsu16_TCCRT1_Prescaler+0x1>
 42c:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <gsu16_TCCRT1_Prescaler>
 430:	06 c0       	rjmp	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 432:	26 e0       	ldi	r18, 0x06	; 6
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	30 93 7e 00 	sts	0x007E, r19	; 0x80007e <gsu16_TCCRT1_Prescaler+0x1>
 43a:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <gsu16_TCCRT1_Prescaler>
 43e:	12 96       	adiw	r26, 0x02	; 2
 440:	9c 91       	ld	r25, X
 442:	99 23       	and	r25, r25
 444:	19 f0       	breq	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 446:	91 30       	cpi	r25, 0x01	; 1
 448:	21 f0       	breq	.+8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44a:	08 95       	ret
 44c:	19 be       	out	0x39, r1	; 57
 44e:	89 2f       	mov	r24, r25
 450:	08 95       	ret
 452:	89 b7       	in	r24, 0x39	; 57
 454:	84 60       	ori	r24, 0x04	; 4
 456:	89 bf       	out	0x39, r24	; 57
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	08 95       	ret
 45c:	14 96       	adiw	r26, 0x04	; 4
 45e:	8d 91       	ld	r24, X+
 460:	9c 91       	ld	r25, X
 462:	15 97       	sbiw	r26, 0x05	; 5
 464:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <sga_Timer2CBF+0x1>
 468:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <sga_Timer2CBF>
 46c:	11 96       	adiw	r26, 0x01	; 1
 46e:	8c 91       	ld	r24, X
 470:	11 97       	sbiw	r26, 0x01	; 1
 472:	81 11       	cpse	r24, r1
 474:	21 c0       	rjmp	.+66     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 476:	13 96       	adiw	r26, 0x03	; 3
 478:	ec 91       	ld	r30, X
 47a:	13 97       	sbiw	r26, 0x03	; 3
 47c:	4e 2f       	mov	r20, r30
 47e:	50 e0       	ldi	r21, 0x00	; 0
 480:	fa 01       	movw	r30, r20
 482:	31 97       	sbiw	r30, 0x01	; 1
 484:	e7 30       	cpi	r30, 0x07	; 7
 486:	f1 05       	cpc	r31, r1
 488:	60 f5       	brcc	.+88     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 48a:	e6 5d       	subi	r30, 0xD6	; 214
 48c:	ff 4f       	sbci	r31, 0xFF	; 255
 48e:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__tablejump2__>
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gsu8_TCCRT2_Prescaler>
 498:	0f c0       	rjmp	.+30     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gsu8_TCCRT2_Prescaler>
 4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4a2:	84 e0       	ldi	r24, 0x04	; 4
 4a4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gsu8_TCCRT2_Prescaler>
 4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4aa:	86 e0       	ldi	r24, 0x06	; 6
 4ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gsu8_TCCRT2_Prescaler>
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b2:	87 e0       	ldi	r24, 0x07	; 7
 4b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gsu8_TCCRT2_Prescaler>
 4b8:	12 96       	adiw	r26, 0x02	; 2
 4ba:	8c 91       	ld	r24, X
 4bc:	88 23       	and	r24, r24
 4be:	19 f0       	breq	.+6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	19 f0       	breq	.+6      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c4:	10 c0       	rjmp	.+32     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4c6:	19 be       	out	0x39, r1	; 57
 4c8:	08 95       	ret
 4ca:	80 e4       	ldi	r24, 0x40	; 64
 4cc:	89 bf       	out	0x39, r24	; 57
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	08 95       	ret
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	08 95       	ret
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	08 95       	ret
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	08 95       	ret
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	08 95       	ret
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	08 95       	ret

000004ea <Timer_Start>:
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	59 f0       	breq	.+22     	; 0x504 <Timer_Start+0x1a>
 4ee:	18 f0       	brcs	.+6      	; 0x4f6 <Timer_Start+0xc>
 4f0:	82 30       	cpi	r24, 0x02	; 2
 4f2:	a9 f0       	breq	.+42     	; 0x51e <Timer_Start+0x34>
 4f4:	1b c0       	rjmp	.+54     	; 0x52c <Timer_Start+0x42>
 4f6:	61 95       	neg	r22
 4f8:	62 bf       	out	0x32, r22	; 50
 4fa:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <gsu8_TCCRT0_Prescaler>
 4fe:	83 bf       	out	0x33, r24	; 51
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	08 95       	ret
 504:	71 95       	neg	r23
 506:	61 95       	neg	r22
 508:	71 09       	sbc	r23, r1
 50a:	7d bd       	out	0x2d, r23	; 45
 50c:	6c bd       	out	0x2c, r22	; 44
 50e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <gsu16_TCCRT1_Prescaler>
 512:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <gsu16_TCCRT1_Prescaler+0x1>
 516:	9f bd       	out	0x2f, r25	; 47
 518:	8e bd       	out	0x2e, r24	; 46
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	08 95       	ret
 51e:	61 95       	neg	r22
 520:	64 bd       	out	0x24, r22	; 36
 522:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gsu8_TCCRT2_Prescaler>
 526:	85 bd       	out	0x25, r24	; 37
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	08 95       	ret

00000530 <__vector_11>:
/********************************************************/
/*			CallBack Functions definition	        	*/
/********************************************************/

ISR (TIMER0_OVF_Vect)
{
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	2f 93       	push	r18
 53c:	3f 93       	push	r19
 53e:	4f 93       	push	r20
 540:	5f 93       	push	r21
 542:	6f 93       	push	r22
 544:	7f 93       	push	r23
 546:	8f 93       	push	r24
 548:	9f 93       	push	r25
 54a:	af 93       	push	r26
 54c:	bf 93       	push	r27
 54e:	ef 93       	push	r30
 550:	ff 93       	push	r31
	if (sga_Timer0CBF!=NULL)
 552:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <sga_Timer0CBF>
 556:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <sga_Timer0CBF+0x1>
 55a:	30 97       	sbiw	r30, 0x00	; 0
 55c:	09 f0       	breq	.+2      	; 0x560 <__vector_11+0x30>
	{
		(*sga_Timer0CBF)();
 55e:	09 95       	icall
	}
}
 560:	ff 91       	pop	r31
 562:	ef 91       	pop	r30
 564:	bf 91       	pop	r27
 566:	af 91       	pop	r26
 568:	9f 91       	pop	r25
 56a:	8f 91       	pop	r24
 56c:	7f 91       	pop	r23
 56e:	6f 91       	pop	r22
 570:	5f 91       	pop	r21
 572:	4f 91       	pop	r20
 574:	3f 91       	pop	r19
 576:	2f 91       	pop	r18
 578:	0f 90       	pop	r0
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	0f 90       	pop	r0
 57e:	1f 90       	pop	r1
 580:	18 95       	reti

00000582 <__vector_9>:
//------------------------------------------------------------------------------------------------------//
ISR (TIMER1_OVF_Vect)
{
 582:	1f 92       	push	r1
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	2f 93       	push	r18
 58e:	3f 93       	push	r19
 590:	4f 93       	push	r20
 592:	5f 93       	push	r21
 594:	6f 93       	push	r22
 596:	7f 93       	push	r23
 598:	8f 93       	push	r24
 59a:	9f 93       	push	r25
 59c:	af 93       	push	r26
 59e:	bf 93       	push	r27
 5a0:	ef 93       	push	r30
 5a2:	ff 93       	push	r31
	if (sga_Timer1CBF!=NULL)
 5a4:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <sga_Timer1CBF>
 5a8:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <sga_Timer1CBF+0x1>
 5ac:	30 97       	sbiw	r30, 0x00	; 0
 5ae:	09 f0       	breq	.+2      	; 0x5b2 <__vector_9+0x30>
	{
		(*sga_Timer1CBF)();
 5b0:	09 95       	icall
	}
}
 5b2:	ff 91       	pop	r31
 5b4:	ef 91       	pop	r30
 5b6:	bf 91       	pop	r27
 5b8:	af 91       	pop	r26
 5ba:	9f 91       	pop	r25
 5bc:	8f 91       	pop	r24
 5be:	7f 91       	pop	r23
 5c0:	6f 91       	pop	r22
 5c2:	5f 91       	pop	r21
 5c4:	4f 91       	pop	r20
 5c6:	3f 91       	pop	r19
 5c8:	2f 91       	pop	r18
 5ca:	0f 90       	pop	r0
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	0f 90       	pop	r0
 5d0:	1f 90       	pop	r1
 5d2:	18 95       	reti

000005d4 <__vector_5>:
//------------------------------------------------------------------------------------------------------//
ISR (TIMER2_OVF_Vect)
{
 5d4:	1f 92       	push	r1
 5d6:	0f 92       	push	r0
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	0f 92       	push	r0
 5dc:	11 24       	eor	r1, r1
 5de:	2f 93       	push	r18
 5e0:	3f 93       	push	r19
 5e2:	4f 93       	push	r20
 5e4:	5f 93       	push	r21
 5e6:	6f 93       	push	r22
 5e8:	7f 93       	push	r23
 5ea:	8f 93       	push	r24
 5ec:	9f 93       	push	r25
 5ee:	af 93       	push	r26
 5f0:	bf 93       	push	r27
 5f2:	ef 93       	push	r30
 5f4:	ff 93       	push	r31
	if (sga_Timer2CBF!=NULL)
 5f6:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <sga_Timer2CBF>
 5fa:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <sga_Timer2CBF+0x1>
 5fe:	30 97       	sbiw	r30, 0x00	; 0
 600:	09 f0       	breq	.+2      	; 0x604 <__vector_5+0x30>
	{
		(*sga_Timer2CBF)();
 602:	09 95       	icall
	}
}
 604:	ff 91       	pop	r31
 606:	ef 91       	pop	r30
 608:	bf 91       	pop	r27
 60a:	af 91       	pop	r26
 60c:	9f 91       	pop	r25
 60e:	8f 91       	pop	r24
 610:	7f 91       	pop	r23
 612:	6f 91       	pop	r22
 614:	5f 91       	pop	r21
 616:	4f 91       	pop	r20
 618:	3f 91       	pop	r19
 61a:	2f 91       	pop	r18
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <__vector_15>:
		/* send function would be called at ISR of UDR it self*/
	}

	UART_DR = u8_Data;
	return E_OK;
}
 626:	1f 92       	push	r1
 628:	0f 92       	push	r0
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	0f 92       	push	r0
 62e:	11 24       	eor	r1, r1
 630:	2f 93       	push	r18
 632:	3f 93       	push	r19
 634:	4f 93       	push	r20
 636:	5f 93       	push	r21
 638:	6f 93       	push	r22
 63a:	7f 93       	push	r23
 63c:	8f 93       	push	r24
 63e:	9f 93       	push	r25
 640:	af 93       	push	r26
 642:	bf 93       	push	r27
 644:	ef 93       	push	r30
 646:	ff 93       	push	r31
 648:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <gaptr_uartInterrupt_CBF>
 64c:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <gaptr_uartInterrupt_CBF+0x1>
 650:	30 97       	sbiw	r30, 0x00	; 0
 652:	09 f0       	breq	.+2      	; 0x656 <__vector_15+0x30>
 654:	09 95       	icall
 656:	ff 91       	pop	r31
 658:	ef 91       	pop	r30
 65a:	bf 91       	pop	r27
 65c:	af 91       	pop	r26
 65e:	9f 91       	pop	r25
 660:	8f 91       	pop	r24
 662:	7f 91       	pop	r23
 664:	6f 91       	pop	r22
 666:	5f 91       	pop	r21
 668:	4f 91       	pop	r20
 66a:	3f 91       	pop	r19
 66c:	2f 91       	pop	r18
 66e:	0f 90       	pop	r0
 670:	0f be       	out	0x3f, r0	; 63
 672:	0f 90       	pop	r0
 674:	1f 90       	pop	r1
 676:	18 95       	reti

00000678 <__vector_13>:
 678:	1f 92       	push	r1
 67a:	0f 92       	push	r0
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	0f 92       	push	r0
 680:	11 24       	eor	r1, r1
 682:	2f 93       	push	r18
 684:	3f 93       	push	r19
 686:	4f 93       	push	r20
 688:	5f 93       	push	r21
 68a:	6f 93       	push	r22
 68c:	7f 93       	push	r23
 68e:	8f 93       	push	r24
 690:	9f 93       	push	r25
 692:	af 93       	push	r26
 694:	bf 93       	push	r27
 696:	ef 93       	push	r30
 698:	ff 93       	push	r31
 69a:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <gaptr_uartInterrupt_CBF+0x2>
 69e:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <gaptr_uartInterrupt_CBF+0x3>
 6a2:	30 97       	sbiw	r30, 0x00	; 0
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <__vector_13+0x30>
 6a6:	09 95       	icall
 6a8:	ff 91       	pop	r31
 6aa:	ef 91       	pop	r30
 6ac:	bf 91       	pop	r27
 6ae:	af 91       	pop	r26
 6b0:	9f 91       	pop	r25
 6b2:	8f 91       	pop	r24
 6b4:	7f 91       	pop	r23
 6b6:	6f 91       	pop	r22
 6b8:	5f 91       	pop	r21
 6ba:	4f 91       	pop	r20
 6bc:	3f 91       	pop	r19
 6be:	2f 91       	pop	r18
 6c0:	0f 90       	pop	r0
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	0f 90       	pop	r0
 6c6:	1f 90       	pop	r1
 6c8:	18 95       	reti

000006ca <__vector_14>:
 6ca:	1f 92       	push	r1
 6cc:	0f 92       	push	r0
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	0f 92       	push	r0
 6d2:	11 24       	eor	r1, r1
 6d4:	2f 93       	push	r18
 6d6:	3f 93       	push	r19
 6d8:	4f 93       	push	r20
 6da:	5f 93       	push	r21
 6dc:	6f 93       	push	r22
 6de:	7f 93       	push	r23
 6e0:	8f 93       	push	r24
 6e2:	9f 93       	push	r25
 6e4:	af 93       	push	r26
 6e6:	bf 93       	push	r27
 6e8:	ef 93       	push	r30
 6ea:	ff 93       	push	r31
 6ec:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <gaptr_uartInterrupt_CBF+0x4>
 6f0:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <gaptr_uartInterrupt_CBF+0x5>
 6f4:	30 97       	sbiw	r30, 0x00	; 0
 6f6:	09 f0       	breq	.+2      	; 0x6fa <__vector_14+0x30>
 6f8:	09 95       	icall
 6fa:	ff 91       	pop	r31
 6fc:	ef 91       	pop	r30
 6fe:	bf 91       	pop	r27
 700:	af 91       	pop	r26
 702:	9f 91       	pop	r25
 704:	8f 91       	pop	r24
 706:	7f 91       	pop	r23
 708:	6f 91       	pop	r22
 70a:	5f 91       	pop	r21
 70c:	4f 91       	pop	r20
 70e:	3f 91       	pop	r19
 710:	2f 91       	pop	r18
 712:	0f 90       	pop	r0
 714:	0f be       	out	0x3f, r0	; 63
 716:	0f 90       	pop	r0
 718:	1f 90       	pop	r1
 71a:	18 95       	reti

0000071c <UART_Init>:
 71c:	8f 92       	push	r8
 71e:	9f 92       	push	r9
 720:	af 92       	push	r10
 722:	bf 92       	push	r11
 724:	cf 92       	push	r12
 726:	df 92       	push	r13
 728:	ef 92       	push	r14
 72a:	ff 92       	push	r15
 72c:	0f 93       	push	r16
 72e:	1f 93       	push	r17
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	00 d0       	rcall	.+0      	; 0x736 <UART_Init+0x1a>
 736:	00 d0       	rcall	.+0      	; 0x738 <UART_Init+0x1c>
 738:	00 d0       	rcall	.+0      	; 0x73a <UART_Init+0x1e>
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	8c 01       	movw	r16, r24
 740:	19 82       	std	Y+1, r1	; 0x01
 742:	1a 82       	std	Y+2, r1	; 0x02
 744:	1b 82       	std	Y+3, r1	; 0x03
 746:	1c 82       	std	Y+4, r1	; 0x04
 748:	1d 82       	std	Y+5, r1	; 0x05
 74a:	1e 82       	std	Y+6, r1	; 0x06
 74c:	dc 01       	movw	r26, r24
 74e:	11 96       	adiw	r26, 0x01	; 1
 750:	8c 91       	ld	r24, X
 752:	81 30       	cpi	r24, 0x01	; 1
 754:	99 f0       	breq	.+38     	; 0x77c <UART_Init+0x60>
 756:	18 f0       	brcs	.+6      	; 0x75e <UART_Init+0x42>
 758:	82 30       	cpi	r24, 0x02	; 2
 75a:	09 f1       	breq	.+66     	; 0x79e <UART_Init+0x82>
 75c:	d0 c0       	rjmp	.+416    	; 0x8fe <__stack+0x9f>
 75e:	f8 01       	movw	r30, r16
 760:	80 81       	ld	r24, Z
 762:	88 23       	and	r24, r24
 764:	41 f0       	breq	.+16     	; 0x776 <UART_Init+0x5a>
 766:	56 9a       	sbi	0x0a, 6	; 10
 768:	82 85       	ldd	r24, Z+10	; 0x0a
 76a:	93 85       	ldd	r25, Z+11	; 0x0b
 76c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <gaptr_uartInterrupt_CBF+0x1>
 770:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <gaptr_uartInterrupt_CBF>
 774:	01 c0       	rjmp	.+2      	; 0x778 <UART_Init+0x5c>
 776:	56 98       	cbi	0x0a, 6	; 10
 778:	53 9a       	sbi	0x0a, 3	; 10
 77a:	2e c0       	rjmp	.+92     	; 0x7d8 <UART_Init+0xbc>
 77c:	d8 01       	movw	r26, r16
 77e:	8c 91       	ld	r24, X
 780:	88 23       	and	r24, r24
 782:	51 f0       	breq	.+20     	; 0x798 <UART_Init+0x7c>
 784:	57 9a       	sbi	0x0a, 7	; 10
 786:	1c 96       	adiw	r26, 0x0c	; 12
 788:	8d 91       	ld	r24, X+
 78a:	9c 91       	ld	r25, X
 78c:	1d 97       	sbiw	r26, 0x0d	; 13
 78e:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <gaptr_uartInterrupt_CBF+0x3>
 792:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <gaptr_uartInterrupt_CBF+0x2>
 796:	01 c0       	rjmp	.+2      	; 0x79a <UART_Init+0x7e>
 798:	57 98       	cbi	0x0a, 7	; 10
 79a:	54 9a       	sbi	0x0a, 4	; 10
 79c:	1d c0       	rjmp	.+58     	; 0x7d8 <UART_Init+0xbc>
 79e:	f8 01       	movw	r30, r16
 7a0:	80 81       	ld	r24, Z
 7a2:	88 23       	and	r24, r24
 7a4:	99 f0       	breq	.+38     	; 0x7cc <UART_Init+0xb0>
 7a6:	8a b1       	in	r24, 0x0a	; 10
 7a8:	80 6c       	ori	r24, 0xC0	; 192
 7aa:	8a b9       	out	0x0a, r24	; 10
 7ac:	e0 e8       	ldi	r30, 0x80	; 128
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	d8 01       	movw	r26, r16
 7b2:	1c 96       	adiw	r26, 0x0c	; 12
 7b4:	8d 91       	ld	r24, X+
 7b6:	9c 91       	ld	r25, X
 7b8:	1d 97       	sbiw	r26, 0x0d	; 13
 7ba:	93 83       	std	Z+3, r25	; 0x03
 7bc:	82 83       	std	Z+2, r24	; 0x02
 7be:	1a 96       	adiw	r26, 0x0a	; 10
 7c0:	8d 91       	ld	r24, X+
 7c2:	9c 91       	ld	r25, X
 7c4:	1b 97       	sbiw	r26, 0x0b	; 11
 7c6:	91 83       	std	Z+1, r25	; 0x01
 7c8:	80 83       	st	Z, r24
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <UART_Init+0xb6>
 7cc:	8a b1       	in	r24, 0x0a	; 10
 7ce:	8f 73       	andi	r24, 0x3F	; 63
 7d0:	8a b9       	out	0x0a, r24	; 10
 7d2:	8a b1       	in	r24, 0x0a	; 10
 7d4:	88 61       	ori	r24, 0x18	; 24
 7d6:	8a b9       	out	0x0a, r24	; 10
 7d8:	f8 01       	movw	r30, r16
 7da:	82 81       	ldd	r24, Z+2	; 0x02
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	11 f4       	brne	.+4      	; 0x7e4 <UART_Init+0xc8>
 7e0:	59 9a       	sbi	0x0b, 1	; 11
 7e2:	03 c0       	rjmp	.+6      	; 0x7ea <UART_Init+0xce>
 7e4:	81 11       	cpse	r24, r1
 7e6:	8d c0       	rjmp	.+282    	; 0x902 <__stack+0xa3>
 7e8:	59 98       	cbi	0x0b, 1	; 11
 7ea:	d8 01       	movw	r26, r16
 7ec:	12 96       	adiw	r26, 0x02	; 2
 7ee:	2c 91       	ld	r18, X
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	2f 5f       	subi	r18, 0xFF	; 255
 7f4:	3f 4f       	sbci	r19, 0xFF	; 255
 7f6:	03 2e       	mov	r0, r19
 7f8:	00 0c       	add	r0, r0
 7fa:	44 0b       	sbc	r20, r20
 7fc:	55 0b       	sbc	r21, r21
 7fe:	81 2c       	mov	r8, r1
 800:	91 2c       	mov	r9, r1
 802:	54 01       	movw	r10, r8
 804:	68 94       	set
 806:	84 f8       	bld	r8, 4
 808:	c5 01       	movw	r24, r10
 80a:	b4 01       	movw	r22, r8
 80c:	0e 94 85 07 	call	0xf0a	; 0xf0a <__udivmodsi4>
 810:	f8 01       	movw	r30, r16
 812:	66 81       	ldd	r22, Z+6	; 0x06
 814:	77 81       	ldd	r23, Z+7	; 0x07
 816:	80 85       	ldd	r24, Z+8	; 0x08
 818:	91 85       	ldd	r25, Z+9	; 0x09
 81a:	0e 94 75 07 	call	0xeea	; 0xeea <__mulsi3>
 81e:	9b 01       	movw	r18, r22
 820:	ac 01       	movw	r20, r24
 822:	0f 2e       	mov	r0, r31
 824:	c1 2c       	mov	r12, r1
 826:	f4 e2       	ldi	r31, 0x24	; 36
 828:	df 2e       	mov	r13, r31
 82a:	f4 ef       	ldi	r31, 0xF4	; 244
 82c:	ef 2e       	mov	r14, r31
 82e:	f1 2c       	mov	r15, r1
 830:	f0 2d       	mov	r31, r0
 832:	c7 01       	movw	r24, r14
 834:	b6 01       	movw	r22, r12
 836:	0e 94 85 07 	call	0xf0a	; 0xf0a <__udivmodsi4>
 83a:	da 01       	movw	r26, r20
 83c:	c9 01       	movw	r24, r18
 83e:	01 97       	sbiw	r24, 0x01	; 1
 840:	a1 09       	sbc	r26, r1
 842:	b1 09       	sbc	r27, r1
 844:	89 2f       	mov	r24, r25
 846:	9a 2f       	mov	r25, r26
 848:	ab 2f       	mov	r26, r27
 84a:	bb 27       	eor	r27, r27
 84c:	80 bd       	out	0x20, r24	; 32
 84e:	d8 01       	movw	r26, r16
 850:	12 96       	adiw	r26, 0x02	; 2
 852:	2c 91       	ld	r18, X
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	2f 5f       	subi	r18, 0xFF	; 255
 858:	3f 4f       	sbci	r19, 0xFF	; 255
 85a:	03 2e       	mov	r0, r19
 85c:	00 0c       	add	r0, r0
 85e:	44 0b       	sbc	r20, r20
 860:	55 0b       	sbc	r21, r21
 862:	c5 01       	movw	r24, r10
 864:	b4 01       	movw	r22, r8
 866:	0e 94 85 07 	call	0xf0a	; 0xf0a <__udivmodsi4>
 86a:	f8 01       	movw	r30, r16
 86c:	66 81       	ldd	r22, Z+6	; 0x06
 86e:	77 81       	ldd	r23, Z+7	; 0x07
 870:	80 85       	ldd	r24, Z+8	; 0x08
 872:	91 85       	ldd	r25, Z+9	; 0x09
 874:	0e 94 75 07 	call	0xeea	; 0xeea <__mulsi3>
 878:	9b 01       	movw	r18, r22
 87a:	ac 01       	movw	r20, r24
 87c:	c7 01       	movw	r24, r14
 87e:	b6 01       	movw	r22, r12
 880:	0e 94 85 07 	call	0xf0a	; 0xf0a <__udivmodsi4>
 884:	21 50       	subi	r18, 0x01	; 1
 886:	29 b9       	out	0x09, r18	; 9
 888:	d8 01       	movw	r26, r16
 88a:	15 96       	adiw	r26, 0x05	; 5
 88c:	8c 91       	ld	r24, X
 88e:	15 97       	sbiw	r26, 0x05	; 5
 890:	86 70       	andi	r24, 0x06	; 6
 892:	28 2f       	mov	r18, r24
 894:	22 0f       	add	r18, r18
 896:	14 96       	adiw	r26, 0x04	; 4
 898:	9c 91       	ld	r25, X
 89a:	b0 e1       	ldi	r27, 0x10	; 16
 89c:	9b 9f       	mul	r25, r27
 89e:	c0 01       	movw	r24, r0
 8a0:	11 24       	eor	r1, r1
 8a2:	80 73       	andi	r24, 0x30	; 48
 8a4:	82 2b       	or	r24, r18
 8a6:	80 bd       	out	0x20, r24	; 32
 8a8:	f8 01       	movw	r30, r16
 8aa:	85 81       	ldd	r24, Z+5	; 0x05
 8ac:	87 30       	cpi	r24, 0x07	; 7
 8ae:	11 f4       	brne	.+4      	; 0x8b4 <__stack+0x55>
 8b0:	52 9a       	sbi	0x0a, 2	; 10
 8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <__stack+0x57>
 8b4:	52 98       	cbi	0x0a, 2	; 10
 8b6:	d8 01       	movw	r26, r16
 8b8:	1e 96       	adiw	r26, 0x0e	; 14
 8ba:	8d 91       	ld	r24, X+
 8bc:	9c 91       	ld	r25, X
 8be:	1f 97       	sbiw	r26, 0x0f	; 15
 8c0:	89 2b       	or	r24, r25
 8c2:	49 f0       	breq	.+18     	; 0x8d6 <__stack+0x77>
 8c4:	55 9a       	sbi	0x0a, 5	; 10
 8c6:	1e 96       	adiw	r26, 0x0e	; 14
 8c8:	8d 91       	ld	r24, X+
 8ca:	9c 91       	ld	r25, X
 8cc:	1f 97       	sbiw	r26, 0x0f	; 15
 8ce:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <gaptr_uartInterrupt_CBF+0x5>
 8d2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <gaptr_uartInterrupt_CBF+0x4>
 8d6:	82 e0       	ldi	r24, 0x02	; 2
 8d8:	8a 83       	std	Y+2, r24	; 0x02
 8da:	13 e0       	ldi	r17, 0x03	; 3
 8dc:	19 83       	std	Y+1, r17	; 0x01
 8de:	8f ef       	ldi	r24, 0xFF	; 255
 8e0:	8b 83       	std	Y+3, r24	; 0x03
 8e2:	ce 01       	movw	r24, r28
 8e4:	01 96       	adiw	r24, 0x01	; 1
 8e6:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_init>
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	8d 83       	std	Y+5, r24	; 0x05
 8ee:	1c 83       	std	Y+4, r17	; 0x04
 8f0:	1e 82       	std	Y+6, r1	; 0x06
 8f2:	ce 01       	movw	r24, r28
 8f4:	04 96       	adiw	r24, 0x04	; 4
 8f6:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_init>
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	03 c0       	rjmp	.+6      	; 0x904 <__stack+0xa5>
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	01 c0       	rjmp	.+2      	; 0x904 <__stack+0xa5>
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	26 96       	adiw	r28, 0x06	; 6
 906:	0f b6       	in	r0, 0x3f	; 63
 908:	f8 94       	cli
 90a:	de bf       	out	0x3e, r29	; 62
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	cd bf       	out	0x3d, r28	; 61
 910:	df 91       	pop	r29
 912:	cf 91       	pop	r28
 914:	1f 91       	pop	r17
 916:	0f 91       	pop	r16
 918:	ff 90       	pop	r15
 91a:	ef 90       	pop	r14
 91c:	df 90       	pop	r13
 91e:	cf 90       	pop	r12
 920:	bf 90       	pop	r11
 922:	af 90       	pop	r10
 924:	9f 90       	pop	r9
 926:	8f 90       	pop	r8
 928:	08 95       	ret

0000092a <UART_ReceiveByte>:
 * \return ERROR_STATUS : Indication to the function execution
 *
 **/
ERROR_STATUS UART_ReceiveByte(uint8 *pu8_ReceivedData)
{
	if(gaptr_uartInterrupt_CBF[RX_CBF] == NULL)
 92a:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <gaptr_uartInterrupt_CBF+0x2>
 92e:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <gaptr_uartInterrupt_CBF+0x3>
 932:	23 2b       	or	r18, r19
 934:	41 f4       	brne	.+16     	; 0x946 <UART_ReceiveByte+0x1c>
	{
		/*	poll on the UDR register receive flag -> receive complete
		 *  wait until it available to read data from it */
		while(!GET_BIT(UART_CSRA,UART_RXC)){}
 936:	2b b1       	in	r18, 0x0b	; 11
 938:	20 78       	andi	r18, 0x80	; 128
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	21 58       	subi	r18, 0x81	; 129
 93e:	3f 4f       	sbci	r19, 0xFF	; 255
 940:	2f 3f       	cpi	r18, 0xFF	; 255
 942:	31 05       	cpc	r19, r1
 944:	c0 f3       	brcs	.-16     	; 0x936 <UART_ReceiveByte+0xc>
	}
	else
	{
		/* received function would be called at RX interrupt*/
	}
	*pu8_ReceivedData = UART_DR;
 946:	2c b1       	in	r18, 0x0c	; 12
 948:	fc 01       	movw	r30, r24
 94a:	20 83       	st	Z, r18
	return E_OK;
}
 94c:	80 e0       	ldi	r24, 0x00	; 0
 94e:	08 95       	ret

00000950 <BCM_TX_CBK>:
			}
		}
	}
	return BCM_TxDispatcher_Error;
	
}
 950:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <gstr_BCM_Send_info+0x1>
 954:	82 30       	cpi	r24, 0x02	; 2
 956:	19 f4       	brne	.+6      	; 0x95e <BCM_TX_CBK+0xe>
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <gstr_BCM_Send_info+0x1>
 95e:	08 95       	ret

00000960 <BCM_RX_CBK>:
 960:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <gstr_BCM_Receive_info+0x1>
 964:	84 30       	cpi	r24, 0x04	; 4
 966:	19 f4       	brne	.+6      	; 0x96e <BCM_RX_CBK+0xe>
 968:	83 e0       	ldi	r24, 0x03	; 3
 96a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <gstr_BCM_Receive_info+0x1>
 96e:	08 95       	ret

00000970 <BCM_Init>:
 970:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 974:	81 30       	cpi	r24, 0x01	; 1
 976:	09 f0       	breq	.+2      	; 0x97a <BCM_Init+0xa>
 978:	64 c0       	rjmp	.+200    	; 0xa42 <BCM_Init+0xd2>
 97a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gstr_BCM_cfg+0x1>
 97e:	81 11       	cpse	r24, r1
 980:	3a c0       	rjmp	.+116    	; 0x9f6 <BCM_Init+0x86>
 982:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gstr_BCM_cfg>
 986:	88 23       	and	r24, r24
 988:	19 f0       	breq	.+6      	; 0x990 <BCM_Init+0x20>
 98a:	81 30       	cpi	r24, 0x01	; 1
 98c:	d9 f0       	breq	.+54     	; 0x9c4 <BCM_Init+0x54>
 98e:	33 c0       	rjmp	.+102    	; 0x9f6 <BCM_Init+0x86>
 990:	e5 e9       	ldi	r30, 0x95	; 149
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 e8       	ldi	r24, 0x80	; 128
 996:	95 e2       	ldi	r25, 0x25	; 37
 998:	a0 e0       	ldi	r26, 0x00	; 0
 99a:	b0 e0       	ldi	r27, 0x00	; 0
 99c:	86 83       	std	Z+6, r24	; 0x06
 99e:	97 83       	std	Z+7, r25	; 0x07
 9a0:	a0 87       	std	Z+8, r26	; 0x08
 9a2:	b1 87       	std	Z+9, r27	; 0x09
 9a4:	83 e0       	ldi	r24, 0x03	; 3
 9a6:	85 83       	std	Z+5, r24	; 0x05
 9a8:	11 82       	std	Z+1, r1	; 0x01
 9aa:	12 82       	std	Z+2, r1	; 0x02
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	80 83       	st	Z, r24
 9b0:	14 82       	std	Z+4, r1	; 0x04
 9b2:	13 82       	std	Z+3, r1	; 0x03
 9b4:	88 ea       	ldi	r24, 0xA8	; 168
 9b6:	94 e0       	ldi	r25, 0x04	; 4
 9b8:	93 87       	std	Z+11, r25	; 0x0b
 9ba:	82 87       	std	Z+10, r24	; 0x0a
 9bc:	cf 01       	movw	r24, r30
 9be:	0e 94 8e 03 	call	0x71c	; 0x71c <UART_Init>
 9c2:	19 c0       	rjmp	.+50     	; 0x9f6 <BCM_Init+0x86>
 9c4:	e5 e9       	ldi	r30, 0x95	; 149
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	80 e8       	ldi	r24, 0x80	; 128
 9ca:	95 e2       	ldi	r25, 0x25	; 37
 9cc:	a0 e0       	ldi	r26, 0x00	; 0
 9ce:	b0 e0       	ldi	r27, 0x00	; 0
 9d0:	86 83       	std	Z+6, r24	; 0x06
 9d2:	97 83       	std	Z+7, r25	; 0x07
 9d4:	a0 87       	std	Z+8, r26	; 0x08
 9d6:	b1 87       	std	Z+9, r27	; 0x09
 9d8:	83 e0       	ldi	r24, 0x03	; 3
 9da:	85 83       	std	Z+5, r24	; 0x05
 9dc:	81 e0       	ldi	r24, 0x01	; 1
 9de:	81 83       	std	Z+1, r24	; 0x01
 9e0:	12 82       	std	Z+2, r1	; 0x02
 9e2:	80 83       	st	Z, r24
 9e4:	14 82       	std	Z+4, r1	; 0x04
 9e6:	13 82       	std	Z+3, r1	; 0x03
 9e8:	80 eb       	ldi	r24, 0xB0	; 176
 9ea:	94 e0       	ldi	r25, 0x04	; 4
 9ec:	95 87       	std	Z+13, r25	; 0x0d
 9ee:	84 87       	std	Z+12, r24	; 0x0c
 9f0:	cf 01       	movw	r24, r30
 9f2:	0e 94 8e 03 	call	0x71c	; 0x71c <UART_Init>
 9f6:	ec ea       	ldi	r30, 0xAC	; 172
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	11 82       	std	Z+1, r1	; 0x01
 9fc:	10 82       	st	Z, r1
 9fe:	a1 eb       	ldi	r26, 0xB1	; 177
 a00:	b0 e0       	ldi	r27, 0x00	; 0
 a02:	1c 92       	st	X, r1
 a04:	13 82       	std	Z+3, r1	; 0x03
 a06:	13 96       	adiw	r26, 0x03	; 3
 a08:	1c 92       	st	X, r1
 a0a:	13 97       	sbiw	r26, 0x03	; 3
 a0c:	14 82       	std	Z+4, r1	; 0x04
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	82 83       	std	Z+2, r24	; 0x02
 a12:	12 96       	adiw	r26, 0x02	; 2
 a14:	8c 93       	st	X, r24
 a16:	12 97       	sbiw	r26, 0x02	; 2
 a18:	11 96       	adiw	r26, 0x01	; 1
 a1a:	1c 92       	st	X, r1
 a1c:	ad e8       	ldi	r26, 0x8D	; 141
 a1e:	b0 e0       	ldi	r27, 0x00	; 0
 a20:	11 96       	adiw	r26, 0x01	; 1
 a22:	1c 92       	st	X, r1
 a24:	1e 92       	st	-X, r1
 a26:	e6 ea       	ldi	r30, 0xA6	; 166
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	11 82       	std	Z+1, r1	; 0x01
 a2c:	10 82       	st	Z, r1
 a2e:	13 96       	adiw	r26, 0x03	; 3
 a30:	1c 92       	st	X, r1
 a32:	1e 92       	st	-X, r1
 a34:	12 97       	sbiw	r26, 0x02	; 2
 a36:	13 82       	std	Z+3, r1	; 0x03
 a38:	12 82       	std	Z+2, r1	; 0x02
 a3a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	08 95       	ret
 a42:	81 11       	cpse	r24, r1
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <BCM_Init+0xda>
 a46:	8d ef       	ldi	r24, 0xFD	; 253
 a48:	08 95       	ret
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	08 95       	ret

00000a4e <BCM_Setup_Receive>:
 a4e:	9c 01       	movw	r18, r24
 a50:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <gstr_BCM_Receive_info+0x2>
 a54:	91 30       	cpi	r25, 0x01	; 1
 a56:	09 f5       	brne	.+66     	; 0xa9a <BCM_Setup_Receive+0x4c>
 a58:	21 15       	cp	r18, r1
 a5a:	31 05       	cpc	r19, r1
 a5c:	d1 f0       	breq	.+52     	; 0xa92 <BCM_Setup_Receive+0x44>
 a5e:	41 15       	cp	r20, r1
 a60:	51 05       	cpc	r21, r1
 a62:	f9 f0       	breq	.+62     	; 0xaa2 <BCM_Setup_Receive+0x54>
 a64:	e6 ea       	ldi	r30, 0xA6	; 166
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	33 83       	std	Z+3, r19	; 0x03
 a6a:	22 83       	std	Z+2, r18	; 0x02
 a6c:	71 83       	std	Z+1, r23	; 0x01
 a6e:	60 83       	st	Z, r22
 a70:	81 e6       	ldi	r24, 0x61	; 97
 a72:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <gu8_Receive_ID>
 a76:	a1 eb       	ldi	r26, 0xB1	; 177
 a78:	b0 e0       	ldi	r27, 0x00	; 0
 a7a:	83 e0       	ldi	r24, 0x03	; 3
 a7c:	11 96       	adiw	r26, 0x01	; 1
 a7e:	8c 93       	st	X, r24
 a80:	11 97       	sbiw	r26, 0x01	; 1
 a82:	12 96       	adiw	r26, 0x02	; 2
 a84:	1c 92       	st	X, r1
 a86:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <gu8_RECEIVE_SM>
 a8a:	55 83       	std	Z+5, r21	; 0x05
 a8c:	44 83       	std	Z+4, r20	; 0x04
 a8e:	80 e0       	ldi	r24, 0x00	; 0
 a90:	08 95       	ret
 a92:	45 2b       	or	r20, r21
 a94:	41 f4       	brne	.+16     	; 0xaa6 <BCM_Setup_Receive+0x58>
 a96:	8c ef       	ldi	r24, 0xFC	; 252
 a98:	08 95       	ret
 a9a:	91 11       	cpse	r25, r1
 a9c:	06 c0       	rjmp	.+12     	; 0xaaa <BCM_Setup_Receive+0x5c>
 a9e:	8d ef       	ldi	r24, 0xFD	; 253
 aa0:	08 95       	ret
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	08 95       	ret
 aa6:	80 e0       	ldi	r24, 0x00	; 0
 aa8:	08 95       	ret
 aaa:	80 e0       	ldi	r24, 0x00	; 0
 aac:	08 95       	ret

00000aae <BCM_RxDispatcher>:
ERR_STATUS BCM_RxDispatcher()
{
	ERR_STATUS BCM_RxDispatcher_Error=ERR_SUCCESS;
	
	/*checks if the BCM initialized or not*/
	if (gu8_BCM_Init_Status==INITIALIZED)
 aae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 ab2:	81 11       	cpse	r24, r1
 ab4:	99 c0       	rjmp	.+306    	; 0xbe8 <BCM_RxDispatcher+0x13a>
	{
		/*checks if the buffer is locked or not*/
		if (gstr_BCM_Receive_info.Buffer_State==LOCKED)
 ab6:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <gstr_BCM_Receive_info+0x2>
 aba:	81 11       	cpse	r24, r1
 abc:	9c c0       	rjmp	.+312    	; 0xbf6 <BCM_RxDispatcher+0x148>
		{
			switch (gu8_RECEIVE_SM)
 abe:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <gu8_RECEIVE_SM>
 ac2:	82 30       	cpi	r24, 0x02	; 2
 ac4:	d9 f1       	breq	.+118    	; 0xb3c <BCM_RxDispatcher+0x8e>
 ac6:	28 f4       	brcc	.+10     	; 0xad2 <BCM_RxDispatcher+0x24>
 ac8:	88 23       	and	r24, r24
 aca:	51 f0       	breq	.+20     	; 0xae0 <BCM_RxDispatcher+0x32>
 acc:	81 30       	cpi	r24, 0x01	; 1
 ace:	f9 f0       	breq	.+62     	; 0xb0e <BCM_RxDispatcher+0x60>
 ad0:	94 c0       	rjmp	.+296    	; 0xbfa <BCM_RxDispatcher+0x14c>
 ad2:	83 30       	cpi	r24, 0x03	; 3
 ad4:	09 f4       	brne	.+2      	; 0xad8 <BCM_RxDispatcher+0x2a>
 ad6:	43 c0       	rjmp	.+134    	; 0xb5e <BCM_RxDispatcher+0xb0>
 ad8:	84 30       	cpi	r24, 0x04	; 4
 ada:	09 f4       	brne	.+2      	; 0xade <BCM_RxDispatcher+0x30>
 adc:	6e c0       	rjmp	.+220    	; 0xbba <BCM_RxDispatcher+0x10c>
 ade:	8d c0       	rjmp	.+282    	; 0xbfa <BCM_RxDispatcher+0x14c>
			{
				case RECEIVE_ID:
				if (gstr_BCM_Receive_info.State==RX)
 ae0:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <gstr_BCM_Receive_info+0x1>
 ae4:	83 30       	cpi	r24, 0x03	; 3
 ae6:	09 f0       	breq	.+2      	; 0xaea <BCM_RxDispatcher+0x3c>
 ae8:	8a c0       	rjmp	.+276    	; 0xbfe <BCM_RxDispatcher+0x150>
				{
					UART_ReceiveByte( &gstr_BCM_Receive_info.ID );
 aea:	84 eb       	ldi	r24, 0xB4	; 180
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	0e 94 95 04 	call	0x92a	; 0x92a <UART_ReceiveByte>
					/*validate that it's the same ID or not for both Transmitter and receiver*/
					if (gu8_Receive_ID ==gstr_BCM_Receive_info.ID)
 af2:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <gstr_BCM_Receive_info+0x3>
 af6:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <gu8_Receive_ID>
 afa:	98 13       	cpse	r25, r24
 afc:	82 c0       	rjmp	.+260    	; 0xc02 <BCM_RxDispatcher+0x154>
					{
						gstr_BCM_Receive_info.State=RX_COMPLETE;
 afe:	84 e0       	ldi	r24, 0x04	; 4
 b00:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <gstr_BCM_Receive_info+0x1>
						gu8_RECEIVE_SM=RECEIVE_SIZE_HIGH;
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <gu8_RECEIVE_SM>
 * Description  : receives a byte each ISR								  *
 **************************************************************************/

ERR_STATUS BCM_RxDispatcher()
{
	ERR_STATUS BCM_RxDispatcher_Error=ERR_SUCCESS;
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	08 95       	ret
				}
				break;
				
				
				case RECEIVE_SIZE_HIGH:
				if (gstr_BCM_Receive_info.State==RX)
 b0e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <gstr_BCM_Receive_info+0x1>
 b12:	83 30       	cpi	r24, 0x03	; 3
 b14:	09 f0       	breq	.+2      	; 0xb18 <BCM_RxDispatcher+0x6a>
 b16:	77 c0       	rjmp	.+238    	; 0xc06 <BCM_RxDispatcher+0x158>
				{
					/*load the high byte by shifting the data by 8bits*/
					UART_ReceiveByte(&gu16_Buffer_Receive_Size);
 b18:	83 e9       	ldi	r24, 0x93	; 147
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	0e 94 95 04 	call	0x92a	; 0x92a <UART_ReceiveByte>
					gu16_Buffer_Receive_Size=(gu16_Buffer_Receive_Size<<8);
 b20:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <gu16_Buffer_Receive_Size>
 b24:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <gu16_Buffer_Receive_Size>
 b28:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <gu16_Buffer_Receive_Size+0x1>
					gstr_BCM_Receive_info.State=RX_COMPLETE;
 b2c:	84 e0       	ldi	r24, 0x04	; 4
 b2e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <gstr_BCM_Receive_info+0x1>
					gu8_RECEIVE_SM=RECEIVE_SIZE_LOW;
 b32:	82 e0       	ldi	r24, 0x02	; 2
 b34:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <gu8_RECEIVE_SM>
 * Description  : receives a byte each ISR								  *
 **************************************************************************/

ERR_STATUS BCM_RxDispatcher()
{
	ERR_STATUS BCM_RxDispatcher_Error=ERR_SUCCESS;
 b38:	80 e0       	ldi	r24, 0x00	; 0
 b3a:	08 95       	ret
				}
				break;
				
				
				case RECEIVE_SIZE_LOW:
				if (gstr_BCM_Receive_info.State==RX)
 b3c:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <gstr_BCM_Receive_info+0x1>
 b40:	83 30       	cpi	r24, 0x03	; 3
 b42:	09 f0       	breq	.+2      	; 0xb46 <BCM_RxDispatcher+0x98>
 b44:	62 c0       	rjmp	.+196    	; 0xc0a <BCM_RxDispatcher+0x15c>
				{
					/*load the low byte*/
					UART_ReceiveByte(&gu16_Buffer_Receive_Size);
 b46:	83 e9       	ldi	r24, 0x93	; 147
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	0e 94 95 04 	call	0x92a	; 0x92a <UART_ReceiveByte>
					gstr_BCM_Receive_info.State=RX_COMPLETE;
 b4e:	84 e0       	ldi	r24, 0x04	; 4
 b50:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <gstr_BCM_Receive_info+0x1>
					gu8_RECEIVE_SM=RECEIVE_DATA;
 b54:	83 e0       	ldi	r24, 0x03	; 3
 b56:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <gu8_RECEIVE_SM>
 * Description  : receives a byte each ISR								  *
 **************************************************************************/

ERR_STATUS BCM_RxDispatcher()
{
	ERR_STATUS BCM_RxDispatcher_Error=ERR_SUCCESS;
 b5a:	80 e0       	ldi	r24, 0x00	; 0
 b5c:	08 95       	ret

				break;
				
				case RECEIVE_DATA:
				/*as long as the index is less than the size, keep scan new elements*/
				if ( (gstr_BCM_Receive_info.Index) < (gu16_Buffer_Receive_Size) )
 b5e:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gstr_BCM_Receive_info+0x4>
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <gu16_Buffer_Receive_Size>
 b68:	30 91 94 00 	lds	r19, 0x0094	; 0x800094 <gu16_Buffer_Receive_Size+0x1>
 b6c:	82 17       	cp	r24, r18
 b6e:	93 07       	cpc	r25, r19
 b70:	f8 f4       	brcc	.+62     	; 0xbb0 <BCM_RxDispatcher+0x102>
				{
					if (gstr_BCM_Receive_info.State==RX)
 b72:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <gstr_BCM_Receive_info+0x1>
 b76:	83 30       	cpi	r24, 0x03	; 3
 b78:	09 f0       	breq	.+2      	; 0xb7c <BCM_RxDispatcher+0xce>
 b7a:	49 c0       	rjmp	.+146    	; 0xc0e <BCM_RxDispatcher+0x160>
					{
						UART_ReceiveByte(&(gstr_Buffer_Receive_Info.Data));
 b7c:	88 ea       	ldi	r24, 0xA8	; 168
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	0e 94 95 04 	call	0x92a	; 0x92a <UART_ReceiveByte>
						/*accumulate the check sum*/
						gua_Received_CheckSum+=gstr_Buffer_Receive_Info.Data;
 b84:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <gua_Received_CheckSum>
 b88:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <gstr_Buffer_Receive_Info+0x2>
 b8c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <gstr_Buffer_Receive_Info+0x3>
 b90:	82 0f       	add	r24, r18
 b92:	91 1d       	adc	r25, r1
 b94:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <gua_Received_CheckSum>
						/*update the index to load the new element*/
						gstr_BCM_Receive_info.Index++;
 b98:	e1 eb       	ldi	r30, 0xB1	; 177
 b9a:	f0 e0       	ldi	r31, 0x00	; 0
 b9c:	84 81       	ldd	r24, Z+4	; 0x04
 b9e:	8f 5f       	subi	r24, 0xFF	; 255
 ba0:	84 83       	std	Z+4, r24	; 0x04
						/*close the session*/
						gstr_BCM_Receive_info.State=RX_COMPLETE;
 ba2:	84 e0       	ldi	r24, 0x04	; 4
 ba4:	81 83       	std	Z+1, r24	; 0x01
						gu8_RECEIVE_SM=RECEIVE_DATA;
 ba6:	83 e0       	ldi	r24, 0x03	; 3
 ba8:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <gu8_RECEIVE_SM>
 * Description  : receives a byte each ISR								  *
 **************************************************************************/

ERR_STATUS BCM_RxDispatcher()
{
	ERR_STATUS BCM_RxDispatcher_Error=ERR_SUCCESS;
 bac:	80 e0       	ldi	r24, 0x00	; 0
 bae:	08 95       	ret
				}
				
				/*if the full buffer is loaded, go to the check sum state*/
				else
				{
					gu8_RECEIVE_SM=RECEIVE_CHECK_SUM;
 bb0:	84 e0       	ldi	r24, 0x04	; 4
 bb2:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <gu8_RECEIVE_SM>
 * Description  : receives a byte each ISR								  *
 **************************************************************************/

ERR_STATUS BCM_RxDispatcher()
{
	ERR_STATUS BCM_RxDispatcher_Error=ERR_SUCCESS;
 bb6:	80 e0       	ldi	r24, 0x00	; 0
 bb8:	08 95       	ret
				}
				break;
				
				case RECEIVE_CHECK_SUM:
				
				if (gstr_BCM_Receive_info.State==RX)
 bba:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <gstr_BCM_Receive_info+0x1>
 bbe:	83 30       	cpi	r24, 0x03	; 3
 bc0:	41 f5       	brne	.+80     	; 0xc12 <BCM_RxDispatcher+0x164>
				{
					UART_ReceiveByte (&(gstr_BCM_Receive_info.Check_Sum));
 bc2:	81 eb       	ldi	r24, 0xB1	; 177
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	0e 94 95 04 	call	0x92a	; 0x92a <UART_ReceiveByte>
					/*check that the data has been sent correctly*/
					if (gua_Received_CheckSum==gstr_BCM_Receive_info.Check_Sum)
 bca:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <gstr_BCM_Receive_info>
 bce:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <gua_Received_CheckSum>
 bd2:	98 13       	cpse	r25, r24
 bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <BCM_RxDispatcher+0x132>
						{
							/*my check for the code*/
							gstr_Buffer_Receive_Info.ptrfu_BCM_Cbk();
 bd6:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <gstr_Buffer_Receive_Info+0x4>
 bda:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <gstr_Buffer_Receive_Info+0x5>
 bde:	09 95       	icall
						}
						/*end the session*/
						gu8_RECEIVE_SM=IDLE;	
 be0:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <gu8_RECEIVE_SM>
 * Description  : receives a byte each ISR								  *
 **************************************************************************/

ERR_STATUS BCM_RxDispatcher()
{
	ERR_STATUS BCM_RxDispatcher_Error=ERR_SUCCESS;
 be4:	80 e0       	ldi	r24, 0x00	; 0
 be6:	08 95       	ret
		{
			/*DO NOTHING*/
		}		
		
	}
	else if (gstr_BCM_Receive_info.Buffer_State==LOCKED)
 be8:	81 e0       	ldi	r24, 0x01	; 1
 bea:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <gstr_BCM_Receive_info+0x2>
 bee:	91 11       	cpse	r25, r1
 bf0:	80 e0       	ldi	r24, 0x00	; 0
 bf2:	81 95       	neg	r24
 bf4:	08 95       	ret
 * Description  : receives a byte each ISR								  *
 **************************************************************************/

ERR_STATUS BCM_RxDispatcher()
{
	ERR_STATUS BCM_RxDispatcher_Error=ERR_SUCCESS;
 bf6:	80 e0       	ldi	r24, 0x00	; 0
 bf8:	08 95       	ret
 bfa:	80 e0       	ldi	r24, 0x00	; 0
 bfc:	08 95       	ret
 bfe:	80 e0       	ldi	r24, 0x00	; 0
 c00:	08 95       	ret
						gu8_RECEIVE_SM=RECEIVE_SIZE_HIGH;
					}
					/*if not equal the session wont be RX so the program wont go to the next state*/
					else if (gu8_Receive_ID !=gstr_BCM_Receive_info.ID)
					{
						BCM_RxDispatcher_Error=ERR_RESOURCE_NOT_FOUND;
 c02:	8b ef       	ldi	r24, 0xFB	; 251
 c04:	08 95       	ret
 * Description  : receives a byte each ISR								  *
 **************************************************************************/

ERR_STATUS BCM_RxDispatcher()
{
	ERR_STATUS BCM_RxDispatcher_Error=ERR_SUCCESS;
 c06:	80 e0       	ldi	r24, 0x00	; 0
 c08:	08 95       	ret
 c0a:	80 e0       	ldi	r24, 0x00	; 0
 c0c:	08 95       	ret
 c0e:	80 e0       	ldi	r24, 0x00	; 0
 c10:	08 95       	ret
 c12:	80 e0       	ldi	r24, 0x00	; 0
	else 
	{
		/*DO NOTHING*/
	}
	return BCM_RxDispatcher_Error;
}
 c14:	08 95       	ret

00000c16 <gfu_TimerFlag_CBK>:
/*					CallBackFunctions    				*/
/********************************************************/

void gfu_TimerFlag_CBK (void)
{
	if (gu8_Session==OFF)
 c16:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <gu8_Session>
 c1a:	81 11       	cpse	r24, r1
 c1c:	10 c0       	rjmp	.+32     	; 0xc3e <gfu_TimerFlag_CBK+0x28>
	{	/*enable the session for the Dispatcher*/
		gu8_Session = ON;
 c1e:	81 e0       	ldi	r24, 0x01	; 1
 c20:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <gu8_Session>
		/*preload the timer to count only the corresponding ticks not from 0*/
		Timer_Start(gstr_TMU_Cfgs.Timer_Channel,gstr_TMU_Cfgs.Resolution*TCNT_1MS);		
 c24:	e3 e6       	ldi	r30, 0x63	; 99
 c26:	f0 e0       	ldi	r31, 0x00	; 0
 c28:	61 81       	ldd	r22, Z+1	; 0x01
 c2a:	72 81       	ldd	r23, Z+2	; 0x02
 c2c:	62 95       	swap	r22
 c2e:	72 95       	swap	r23
 c30:	70 7f       	andi	r23, 0xF0	; 240
 c32:	76 27       	eor	r23, r22
 c34:	60 7f       	andi	r22, 0xF0	; 240
 c36:	76 27       	eor	r23, r22
 c38:	80 81       	ld	r24, Z
 c3a:	0e 94 75 02 	call	0x4ea	; 0x4ea <Timer_Start>
 c3e:	08 95       	ret

00000c40 <TMU_Init>:
 * Return 		: value of type ERR_STATUS							  *	
 * Description  : initialize the TMU by initializing the Timer with the	  *
				  configuration scanned from the user (timer 0,1,2)	      *
 **************************************************************************/
ERR_STATUS TMU_Init (void)
{
 c40:	1f 93       	push	r17
 c42:	cf 93       	push	r28
 c44:	df 93       	push	r29
 c46:	00 d0       	rcall	.+0      	; 0xc48 <TMU_Init+0x8>
 c48:	00 d0       	rcall	.+0      	; 0xc4a <TMU_Init+0xa>
 c4a:	00 d0       	rcall	.+0      	; 0xc4c <TMU_Init+0xc>
 c4c:	cd b7       	in	r28, 0x3d	; 61
 c4e:	de b7       	in	r29, 0x3e	; 62
	ERR_STATUS TMU_Init_Error;
	TMU_Init_Error=ERR_SUCCESS;
	
	if (gs8_TMU_Init_State==NOT_INITIALIZED)
 c50:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <gs8_TMU_Init_State>
 c54:	81 11       	cpse	r24, r1
 c56:	14 c0       	rjmp	.+40     	; 0xc80 <TMU_Init+0x40>
	{
		/*initialize the timer*/
		Timer_cfg_s TMU;
		TMU.Timer_Cbk_ptr = gfu_TimerFlag_CBK;
 c58:	8b e0       	ldi	r24, 0x0B	; 11
 c5a:	96 e0       	ldi	r25, 0x06	; 6
 c5c:	9e 83       	std	Y+6, r25	; 0x06
 c5e:	8d 83       	std	Y+5, r24	; 0x05
		TMU.Timer_CH_NO=gstr_TMU_Cfgs.Timer_Channel;
 c60:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <gstr_TMU_Cfgs>
 c64:	89 83       	std	Y+1, r24	; 0x01
		TMU.Timer_Mode=TIMER_MODE;
 c66:	1a 82       	std	Y+2, r1	; 0x02
		TMU.Timer_Polling_Or_Interrupt=TIMER_INTERRUPT_MODE;
 c68:	11 e0       	ldi	r17, 0x01	; 1
 c6a:	1b 83       	std	Y+3, r17	; 0x03
		TMU.Timer_Prescaler=TIMER_PRESCALER_1024;
 c6c:	87 e0       	ldi	r24, 0x07	; 7
 c6e:	8c 83       	std	Y+4, r24	; 0x04
		Timer_Init(&TMU);	
 c70:	ce 01       	movw	r24, r28
 c72:	01 96       	adiw	r24, 0x01	; 1
 c74:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Timer_Init>
		gs8_TMU_Init_State=INITIALIZED;
 c78:	10 93 88 00 	sts	0x0088, r17	; 0x800088 <gs8_TMU_Init_State>
				  configuration scanned from the user (timer 0,1,2)	      *
 **************************************************************************/
ERR_STATUS TMU_Init (void)
{
	ERR_STATUS TMU_Init_Error;
	TMU_Init_Error=ERR_SUCCESS;
 c7c:	80 e0       	ldi	r24, 0x00	; 0
 c7e:	05 c0       	rjmp	.+10     	; 0xc8a <TMU_Init+0x4a>
		TMU.Timer_Polling_Or_Interrupt=TIMER_INTERRUPT_MODE;
		TMU.Timer_Prescaler=TIMER_PRESCALER_1024;
		Timer_Init(&TMU);	
		gs8_TMU_Init_State=INITIALIZED;
	}
	else if (gs8_TMU_Init_State==INITIALIZED)
 c80:	81 30       	cpi	r24, 0x01	; 1
 c82:	11 f4       	brne	.+4      	; 0xc88 <TMU_Init+0x48>
	{
		TMU_Init_Error=ERR_ALREADY_INITIALIZED;
 c84:	8d ef       	ldi	r24, 0xFD	; 253
 c86:	01 c0       	rjmp	.+2      	; 0xc8a <TMU_Init+0x4a>
				  configuration scanned from the user (timer 0,1,2)	      *
 **************************************************************************/
ERR_STATUS TMU_Init (void)
{
	ERR_STATUS TMU_Init_Error;
	TMU_Init_Error=ERR_SUCCESS;
 c88:	80 e0       	ldi	r24, 0x00	; 0
	{
		TMU_Init_Error=ERR_ALREADY_INITIALIZED;
	}
	return TMU_Init_Error;
	
}
 c8a:	26 96       	adiw	r28, 0x06	; 6
 c8c:	0f b6       	in	r0, 0x3f	; 63
 c8e:	f8 94       	cli
 c90:	de bf       	out	0x3e, r29	; 62
 c92:	0f be       	out	0x3f, r0	; 63
 c94:	cd bf       	out	0x3d, r28	; 61
 c96:	df 91       	pop	r29
 c98:	cf 91       	pop	r28
 c9a:	1f 91       	pop	r17
 c9c:	08 95       	ret

00000c9e <TMU_Start>:
 * Description  : starts the timer if it's the first time to load in	  *
				  the database, and load the tasks in the database	      *
 **************************************************************************/

ERR_STATUS TMU_Start(TMU_Task_cfg_t *gstr_NewTask)
{	
 c9e:	cf 93       	push	r28
 ca0:	df 93       	push	r29
 ca2:	fc 01       	movw	r30, r24
	ERR_STATUS Error_MTU_Start=ERR_SUCCESS;
	
	if (gs8_TMU_Init_State==INITIALIZED)
 ca4:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <gs8_TMU_Init_State>
 ca8:	91 30       	cpi	r25, 0x01	; 1
 caa:	09 f0       	breq	.+2      	; 0xcae <TMU_Start+0x10>
 cac:	48 c0       	rjmp	.+144    	; 0xd3e <TMU_Start+0xa0>
 cae:	ef 01       	movw	r28, r30
	{
		/*check if it's the first element in the database*/
		if (gu8_index==0)
 cb0:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <gu8_index>
 cb4:	91 11       	cpse	r25, r1
 cb6:	25 c0       	rjmp	.+74     	; 0xd02 <TMU_Start+0x64>
		{
			/*if the user input invalid channel number*/
			if (gstr_TMU_Cfgs.Timer_Channel>2)
 cb8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <gstr_TMU_Cfgs>
 cbc:	83 30       	cpi	r24, 0x03	; 3
 cbe:	08 f0       	brcs	.+2      	; 0xcc2 <TMU_Start+0x24>
 cc0:	48 c0       	rjmp	.+144    	; 0xd52 <TMU_Start+0xb4>
			}
			
			else 
			{	
				/*if the user input invalid resolution for timer 0 or timer 2*/
				if (((gstr_TMU_Cfgs.Timer_Channel==Timer0_channel)||(gstr_TMU_Cfgs.Timer_Channel==Timer0_channel)) && ((gstr_TMU_Cfgs.Resolution)>MaxResolutionforTimer0or2))
 cc2:	81 11       	cpse	r24, r1
 cc4:	09 c0       	rjmp	.+18     	; 0xcd8 <TMU_Start+0x3a>
 cc6:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <gstr_TMU_Cfgs+0x1>
 cca:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <gstr_TMU_Cfgs+0x2>
 cce:	21 31       	cpi	r18, 0x11	; 17
 cd0:	31 05       	cpc	r19, r1
 cd2:	08 f0       	brcs	.+2      	; 0xcd6 <TMU_Start+0x38>
 cd4:	40 c0       	rjmp	.+128    	; 0xd56 <TMU_Start+0xb8>
 cd6:	09 c0       	rjmp	.+18     	; 0xcea <TMU_Start+0x4c>
				{
					Error_MTU_Start=ERR_HW_CONSTRAIN;
				}
				/*if the user input invalid resolution for timer 1*/
				else if ((gstr_TMU_Cfgs.Timer_Channel==Timer1_channel) && (gstr_TMU_Cfgs.Resolution>MaxResolutionForTimer1))
 cd8:	81 30       	cpi	r24, 0x01	; 1
 cda:	39 f4       	brne	.+14     	; 0xcea <TMU_Start+0x4c>
 cdc:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <gstr_TMU_Cfgs+0x1>
 ce0:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <gstr_TMU_Cfgs+0x2>
 ce4:	21 36       	cpi	r18, 0x61	; 97
 ce6:	30 41       	sbci	r19, 0x10	; 16
 ce8:	c0 f5       	brcc	.+112    	; 0xd5a <TMU_Start+0xbc>
					Error_MTU_Start=ERR_HW_CONSTRAIN;
				}
				
				else 
				{
					Timer_Start(gstr_TMU_Cfgs.Timer_Channel,gstr_TMU_Cfgs.Resolution*TCNT_1MS);
 cea:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <gstr_TMU_Cfgs+0x1>
 cee:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <gstr_TMU_Cfgs+0x2>
 cf2:	62 95       	swap	r22
 cf4:	72 95       	swap	r23
 cf6:	70 7f       	andi	r23, 0xF0	; 240
 cf8:	76 27       	eor	r23, r22
 cfa:	60 7f       	andi	r22, 0xF0	; 240
 cfc:	76 27       	eor	r23, r22
 cfe:	0e 94 75 02 	call	0x4ea	; 0x4ea <Timer_Start>
				}
			}
		}
		
		/*check if the database has more spots free left*/
		if (gu8_index<MaxNumberOfTasks)
 d02:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <gu8_index>
 d06:	94 30       	cpi	r25, 0x04	; 4
 d08:	f0 f4       	brcc	.+60     	; 0xd46 <TMU_Start+0xa8>
 d0a:	80 e0       	ldi	r24, 0x00	; 0
		{
			if (gstr_NewTask->ptrfu_Timer_Cbk==NULL)
 d0c:	2b 81       	ldd	r18, Y+3	; 0x03
 d0e:	3c 81       	ldd	r19, Y+4	; 0x04
 d10:	23 2b       	or	r18, r19
 d12:	d9 f0       	breq	.+54     	; 0xd4a <TMU_Start+0xac>
				Error_MTU_Start=ERR_NULL_PTR;
			}
			
			else if (gstr_NewTask->ptrfu_Timer_Cbk!=NULL)
			{
				gastr_TMU_TasksDataBase[gu8_index]=*gstr_NewTask;
 d14:	29 2f       	mov	r18, r25
 d16:	30 e0       	ldi	r19, 0x00	; 0
 d18:	d9 01       	movw	r26, r18
 d1a:	aa 0f       	add	r26, r26
 d1c:	bb 1f       	adc	r27, r27
 d1e:	aa 0f       	add	r26, r26
 d20:	bb 1f       	adc	r27, r27
 d22:	a2 0f       	add	r26, r18
 d24:	b3 1f       	adc	r27, r19
 d26:	a9 54       	subi	r26, 0x49	; 73
 d28:	bf 4f       	sbci	r27, 0xFF	; 255
 d2a:	25 e0       	ldi	r18, 0x05	; 5
 d2c:	fe 01       	movw	r30, r28
 d2e:	01 90       	ld	r0, Z+
 d30:	0d 92       	st	X+, r0
 d32:	2a 95       	dec	r18
 d34:	e1 f7       	brne	.-8      	; 0xd2e <TMU_Start+0x90>
				/*update the index*/
				gu8_index++;	
 d36:	9f 5f       	subi	r25, 0xFF	; 255
 d38:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <gu8_index>
 d3c:	10 c0       	rjmp	.+32     	; 0xd5e <TMU_Start+0xc0>
			}
		}		
	}
	else if (gs8_TMU_Init_State==NOT_INITIALIZED)
 d3e:	91 11       	cpse	r25, r1
 d40:	06 c0       	rjmp	.+12     	; 0xd4e <TMU_Start+0xb0>
	{
		Error_MTU_Start=ERR_NOTINITIALIZED;
 d42:	8e ef       	ldi	r24, 0xFE	; 254
 d44:	0c c0       	rjmp	.+24     	; 0xd5e <TMU_Start+0xc0>
 d46:	80 e0       	ldi	r24, 0x00	; 0
 d48:	0a c0       	rjmp	.+20     	; 0xd5e <TMU_Start+0xc0>
		/*check if the database has more spots free left*/
		if (gu8_index<MaxNumberOfTasks)
		{
			if (gstr_NewTask->ptrfu_Timer_Cbk==NULL)
			{
				Error_MTU_Start=ERR_NULL_PTR;
 d4a:	8c ef       	ldi	r24, 0xFC	; 252
 d4c:	08 c0       	rjmp	.+16     	; 0xd5e <TMU_Start+0xc0>
				  the database, and load the tasks in the database	      *
 **************************************************************************/

ERR_STATUS TMU_Start(TMU_Task_cfg_t *gstr_NewTask)
{	
	ERR_STATUS Error_MTU_Start=ERR_SUCCESS;
 d4e:	80 e0       	ldi	r24, 0x00	; 0
	
	else 
	{
		/*DO NOTHING*/
	}
	return Error_MTU_Start;
 d50:	06 c0       	rjmp	.+12     	; 0xd5e <TMU_Start+0xc0>
		if (gu8_index==0)
		{
			/*if the user input invalid channel number*/
			if (gstr_TMU_Cfgs.Timer_Channel>2)
			{
				Error_MTU_Start=ERR_INVALID_ARGU;
 d52:	8f ef       	ldi	r24, 0xFF	; 255
 d54:	db cf       	rjmp	.-74     	; 0xd0c <TMU_Start+0x6e>
			else 
			{	
				/*if the user input invalid resolution for timer 0 or timer 2*/
				if (((gstr_TMU_Cfgs.Timer_Channel==Timer0_channel)||(gstr_TMU_Cfgs.Timer_Channel==Timer0_channel)) && ((gstr_TMU_Cfgs.Resolution)>MaxResolutionforTimer0or2))
				{
					Error_MTU_Start=ERR_HW_CONSTRAIN;
 d56:	8a ef       	ldi	r24, 0xFA	; 250
 d58:	d9 cf       	rjmp	.-78     	; 0xd0c <TMU_Start+0x6e>
				}
				/*if the user input invalid resolution for timer 1*/
				else if ((gstr_TMU_Cfgs.Timer_Channel==Timer1_channel) && (gstr_TMU_Cfgs.Resolution>MaxResolutionForTimer1))
				{
					Error_MTU_Start=ERR_HW_CONSTRAIN;
 d5a:	8a ef       	ldi	r24, 0xFA	; 250
 d5c:	d7 cf       	rjmp	.-82     	; 0xd0c <TMU_Start+0x6e>
	{
		/*DO NOTHING*/
	}
	return Error_MTU_Start;

}
 d5e:	df 91       	pop	r29
 d60:	cf 91       	pop	r28
 d62:	08 95       	ret

00000d64 <Tmu_Stop>:
 * Return 		: value of type ERR_STATUS								  *	
 * Description  : stops specific task								      *
 **************************************************************************/

ERR_STATUS Tmu_Stop(void (*Func_ptr)(void))
{
 d64:	bc 01       	movw	r22, r24
	ERR_STATUS TMU_STOP_Error=ERR_SUCCESS;
	
	if (gs8_TMU_Init_State==INITIALIZED)
 d66:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <gs8_TMU_Init_State>
 d6a:	81 30       	cpi	r24, 0x01	; 1
 d6c:	09 f0       	breq	.+2      	; 0xd70 <Tmu_Stop+0xc>
 d6e:	41 c0       	rjmp	.+130    	; 0xdf2 <Tmu_Stop+0x8e>
	{
		if (*Func_ptr!=NULL)
 d70:	61 15       	cp	r22, r1
 d72:	71 05       	cpc	r23, r1
 d74:	09 f4       	brne	.+2      	; 0xd78 <Tmu_Stop+0x14>
 d76:	3f c0       	rjmp	.+126    	; 0xdf6 <Tmu_Stop+0x92>
		{
			/*loop all of the database*/
			for (gu8_Iteration=0;gu8_Iteration<gu8_index;gu8_Iteration++)
 d78:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <gu8_Iteration>
 d7c:	40 91 8b 00 	lds	r20, 0x008B	; 0x80008b <gu8_index>
 d80:	44 23       	and	r20, r20
 d82:	d9 f1       	breq	.+118    	; 0xdfa <Tmu_Stop+0x96>
 d84:	90 e0       	ldi	r25, 0x00	; 0
			{
				/*determine the task of the function to be stopped*/
				if (gastr_TMU_TasksDataBase[gu8_Iteration].ptrfu_Timer_Cbk==Func_ptr)
 d86:	29 2f       	mov	r18, r25
 d88:	30 e0       	ldi	r19, 0x00	; 0
 d8a:	f9 01       	movw	r30, r18
 d8c:	ee 0f       	add	r30, r30
 d8e:	ff 1f       	adc	r31, r31
 d90:	ee 0f       	add	r30, r30
 d92:	ff 1f       	adc	r31, r31
 d94:	e2 0f       	add	r30, r18
 d96:	f3 1f       	adc	r31, r19
 d98:	e9 54       	subi	r30, 0x49	; 73
 d9a:	ff 4f       	sbci	r31, 0xFF	; 255
 d9c:	03 80       	ldd	r0, Z+3	; 0x03
 d9e:	f4 81       	ldd	r31, Z+4	; 0x04
 da0:	e0 2d       	mov	r30, r0
 da2:	6e 17       	cp	r22, r30
 da4:	7f 07       	cpc	r23, r31
 da6:	e1 f4       	brne	.+56     	; 0xde0 <Tmu_Stop+0x7c>
				{
					/*over write the struct of the function to be stopped by the last struct in the database*/
					gastr_TMU_TasksDataBase[gu8_Iteration]=gastr_TMU_TasksDataBase[gu8_index];
 da8:	d9 01       	movw	r26, r18
 daa:	aa 0f       	add	r26, r26
 dac:	bb 1f       	adc	r27, r27
 dae:	aa 0f       	add	r26, r26
 db0:	bb 1f       	adc	r27, r27
 db2:	a2 0f       	add	r26, r18
 db4:	b3 1f       	adc	r27, r19
 db6:	a9 54       	subi	r26, 0x49	; 73
 db8:	bf 4f       	sbci	r27, 0xFF	; 255
 dba:	24 2f       	mov	r18, r20
 dbc:	30 e0       	ldi	r19, 0x00	; 0
 dbe:	f9 01       	movw	r30, r18
 dc0:	ee 0f       	add	r30, r30
 dc2:	ff 1f       	adc	r31, r31
 dc4:	ee 0f       	add	r30, r30
 dc6:	ff 1f       	adc	r31, r31
 dc8:	e2 0f       	add	r30, r18
 dca:	f3 1f       	adc	r31, r19
 dcc:	e9 54       	subi	r30, 0x49	; 73
 dce:	ff 4f       	sbci	r31, 0xFF	; 255
 dd0:	85 e0       	ldi	r24, 0x05	; 5
 dd2:	01 90       	ld	r0, Z+
 dd4:	0d 92       	st	X+, r0
 dd6:	8a 95       	dec	r24
 dd8:	e1 f7       	brne	.-8      	; 0xdd2 <Tmu_Stop+0x6e>
					/*update the pointer of the database*/
					gu8_index--;
 dda:	41 50       	subi	r20, 0x01	; 1
 ddc:	40 93 8b 00 	sts	0x008B, r20	; 0x80008b <gu8_index>
	if (gs8_TMU_Init_State==INITIALIZED)
	{
		if (*Func_ptr!=NULL)
		{
			/*loop all of the database*/
			for (gu8_Iteration=0;gu8_Iteration<gu8_index;gu8_Iteration++)
 de0:	9f 5f       	subi	r25, 0xFF	; 255
 de2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <gu8_Iteration>
 de6:	40 91 8b 00 	lds	r20, 0x008B	; 0x80008b <gu8_index>
 dea:	94 17       	cp	r25, r20
 dec:	60 f2       	brcs	.-104    	; 0xd86 <Tmu_Stop+0x22>
 * Description  : stops specific task								      *
 **************************************************************************/

ERR_STATUS Tmu_Stop(void (*Func_ptr)(void))
{
	ERR_STATUS TMU_STOP_Error=ERR_SUCCESS;
 dee:	80 e0       	ldi	r24, 0x00	; 0
 df0:	08 95       	ret
 df2:	80 e0       	ldi	r24, 0x00	; 0
 df4:	08 95       	ret
				}
			}			
		}
		else if (*Func_ptr==NULL)
		{
			TMU_STOP_Error=ERR_NULL_PTR;
 df6:	8c ef       	ldi	r24, 0xFC	; 252
 df8:	08 95       	ret
 * Description  : stops specific task								      *
 **************************************************************************/

ERR_STATUS Tmu_Stop(void (*Func_ptr)(void))
{
	ERR_STATUS TMU_STOP_Error=ERR_SUCCESS;
 dfa:	80 e0       	ldi	r24, 0x00	; 0
		TMU_STOP_Error=NOT_INITIALIZED;
	}
	
	return TMU_STOP_Error;

}
 dfc:	08 95       	ret

00000dfe <TMU_Dispatcher>:
 * Description  : updates the time of the system every "resolution" and	  *
				  takes the corresponding actions						  *
 **************************************************************************/

ERR_STATUS TMU_Dispatcher ()
{
 dfe:	cf 93       	push	r28
 e00:	df 93       	push	r29
	ERR_STATUS TMU_Dispatcher_Error=ERR_SUCCESS;
	
	if (gs8_TMU_Init_State==INITIALIZED)
 e02:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <gs8_TMU_Init_State>
 e06:	81 30       	cpi	r24, 0x01	; 1
 e08:	09 f0       	breq	.+2      	; 0xe0c <TMU_Dispatcher+0xe>
 e0a:	68 c0       	rjmp	.+208    	; 0xedc <TMU_Dispatcher+0xde>
	{
		/* to enter the dispatcher only after the ISR opens the session (every 1 resolutions)*/
		if(gu8_Session==ON)
 e0c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <gu8_Session>
 e10:	81 30       	cpi	r24, 0x01	; 1
 e12:	09 f0       	breq	.+2      	; 0xe16 <TMU_Dispatcher+0x18>
 e14:	65 c0       	rjmp	.+202    	; 0xee0 <TMU_Dispatcher+0xe2>
		{
			/* loop all of the database*/
			for (gu8_Iteration=0;gu8_Iteration<=gu8_index;gu8_Iteration++)
 e16:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <gu8_Iteration>
 e1a:	80 e0       	ldi	r24, 0x00	; 0
 e1c:	c0 e0       	ldi	r28, 0x00	; 0
							Tmu_Stop(gastr_TMU_TasksDataBase[gu8_Iteration].ptrfu_Timer_Cbk);
						}
						
						else if (gastr_TMU_TasksDataBase[gu8_Iteration].ptrfu_Timer_Cbk==NULL)
						{
							TMU_Dispatcher_Error=ERR_NULL_PTR;
 e1e:	dc ef       	ldi	r29, 0xFC	; 252
		{
			/* loop all of the database*/
			for (gu8_Iteration=0;gu8_Iteration<=gu8_index;gu8_Iteration++)
			{
				/*update the timing of all tasks*/
				gastr_TMU_TasksDataBase[gu8_Iteration].current_time++;
 e20:	90 e0       	ldi	r25, 0x00	; 0
 e22:	fc 01       	movw	r30, r24
 e24:	ee 0f       	add	r30, r30
 e26:	ff 1f       	adc	r31, r31
 e28:	ee 0f       	add	r30, r30
 e2a:	ff 1f       	adc	r31, r31
 e2c:	e8 0f       	add	r30, r24
 e2e:	f9 1f       	adc	r31, r25
 e30:	e9 54       	subi	r30, 0x49	; 73
 e32:	ff 4f       	sbci	r31, 0xFF	; 255
 e34:	21 81       	ldd	r18, Z+1	; 0x01
 e36:	2f 5f       	subi	r18, 0xFF	; 255
 e38:	21 83       	std	Z+1, r18	; 0x01
				/*check if any function reached it's period*/
				if (gastr_TMU_TasksDataBase[gu8_Iteration].current_time==gastr_TMU_TasksDataBase[gu8_Iteration].Period_Time)
 e3a:	32 81       	ldd	r19, Z+2	; 0x02
 e3c:	23 13       	cpse	r18, r19
 e3e:	41 c0       	rjmp	.+130    	; 0xec2 <TMU_Dispatcher+0xc4>
				{
					/*call the function which to be called every period*/
					if (gastr_TMU_TasksDataBase[gu8_Iteration].ptrfu_Timer_Cbk!=NULL)
 e40:	fc 01       	movw	r30, r24
 e42:	ee 0f       	add	r30, r30
 e44:	ff 1f       	adc	r31, r31
 e46:	ee 0f       	add	r30, r30
 e48:	ff 1f       	adc	r31, r31
 e4a:	8e 0f       	add	r24, r30
 e4c:	9f 1f       	adc	r25, r31
 e4e:	fc 01       	movw	r30, r24
 e50:	e9 54       	subi	r30, 0x49	; 73
 e52:	ff 4f       	sbci	r31, 0xFF	; 255
 e54:	03 80       	ldd	r0, Z+3	; 0x03
 e56:	f4 81       	ldd	r31, Z+4	; 0x04
 e58:	e0 2d       	mov	r30, r0
 e5a:	30 97       	sbiw	r30, 0x00	; 0
 e5c:	11 f0       	breq	.+4      	; 0xe62 <TMU_Dispatcher+0x64>
					{
						gastr_TMU_TasksDataBase[gu8_Iteration].ptrfu_Timer_Cbk();
 e5e:	09 95       	icall
 e60:	01 c0       	rjmp	.+2      	; 0xe64 <TMU_Dispatcher+0x66>
					}
					
					else if (gastr_TMU_TasksDataBase[gu8_Iteration].ptrfu_Timer_Cbk==NULL)
					{
						TMU_Dispatcher_Error=ERR_NULL_PTR;
 e62:	cd 2f       	mov	r28, r29
					{
						/*DO NOTHING*/
					}

					/*checks if the function is periodic or one shot*/
					if (gastr_TMU_TasksDataBase[gu8_Iteration].Repetition==PERIODIC)
 e64:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <gu8_Iteration>
 e68:	90 e0       	ldi	r25, 0x00	; 0
 e6a:	fc 01       	movw	r30, r24
 e6c:	ee 0f       	add	r30, r30
 e6e:	ff 1f       	adc	r31, r31
 e70:	ee 0f       	add	r30, r30
 e72:	ff 1f       	adc	r31, r31
 e74:	e8 0f       	add	r30, r24
 e76:	f9 1f       	adc	r31, r25
 e78:	e9 54       	subi	r30, 0x49	; 73
 e7a:	ff 4f       	sbci	r31, 0xFF	; 255
 e7c:	20 81       	ld	r18, Z
 e7e:	21 11       	cpse	r18, r1
 e80:	0c c0       	rjmp	.+24     	; 0xe9a <TMU_Dispatcher+0x9c>
					{
						gastr_TMU_TasksDataBase[gu8_Iteration].current_time=0;
 e82:	fc 01       	movw	r30, r24
 e84:	ee 0f       	add	r30, r30
 e86:	ff 1f       	adc	r31, r31
 e88:	ee 0f       	add	r30, r30
 e8a:	ff 1f       	adc	r31, r31
 e8c:	8e 0f       	add	r24, r30
 e8e:	9f 1f       	adc	r25, r31
 e90:	fc 01       	movw	r30, r24
 e92:	e9 54       	subi	r30, 0x49	; 73
 e94:	ff 4f       	sbci	r31, 0xFF	; 255
 e96:	11 82       	std	Z+1, r1	; 0x01
 e98:	14 c0       	rjmp	.+40     	; 0xec2 <TMU_Dispatcher+0xc4>
					}
					else if (gastr_TMU_TasksDataBase[gu8_Iteration].Repetition==ONE_SHOT)
 e9a:	21 30       	cpi	r18, 0x01	; 1
 e9c:	91 f4       	brne	.+36     	; 0xec2 <TMU_Dispatcher+0xc4>
					{
						if (gastr_TMU_TasksDataBase[gu8_Iteration].ptrfu_Timer_Cbk!=NULL)
 e9e:	fc 01       	movw	r30, r24
 ea0:	ee 0f       	add	r30, r30
 ea2:	ff 1f       	adc	r31, r31
 ea4:	ee 0f       	add	r30, r30
 ea6:	ff 1f       	adc	r31, r31
 ea8:	8e 0f       	add	r24, r30
 eaa:	9f 1f       	adc	r25, r31
 eac:	fc 01       	movw	r30, r24
 eae:	e9 54       	subi	r30, 0x49	; 73
 eb0:	ff 4f       	sbci	r31, 0xFF	; 255
 eb2:	83 81       	ldd	r24, Z+3	; 0x03
 eb4:	94 81       	ldd	r25, Z+4	; 0x04
 eb6:	00 97       	sbiw	r24, 0x00	; 0
 eb8:	19 f0       	breq	.+6      	; 0xec0 <TMU_Dispatcher+0xc2>
						{
							Tmu_Stop(gastr_TMU_TasksDataBase[gu8_Iteration].ptrfu_Timer_Cbk);
 eba:	0e 94 b2 06 	call	0xd64	; 0xd64 <Tmu_Stop>
 ebe:	01 c0       	rjmp	.+2      	; 0xec2 <TMU_Dispatcher+0xc4>
						}
						
						else if (gastr_TMU_TasksDataBase[gu8_Iteration].ptrfu_Timer_Cbk==NULL)
						{
							TMU_Dispatcher_Error=ERR_NULL_PTR;
 ec0:	cd 2f       	mov	r28, r29
	{
		/* to enter the dispatcher only after the ISR opens the session (every 1 resolutions)*/
		if(gu8_Session==ON)
		{
			/* loop all of the database*/
			for (gu8_Iteration=0;gu8_Iteration<=gu8_index;gu8_Iteration++)
 ec2:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <gu8_Iteration>
 ec6:	8f 5f       	subi	r24, 0xFF	; 255
 ec8:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <gu8_Iteration>
 ecc:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <gu8_index>
 ed0:	98 17       	cp	r25, r24
 ed2:	08 f0       	brcs	.+2      	; 0xed6 <TMU_Dispatcher+0xd8>
 ed4:	a5 cf       	rjmp	.-182    	; 0xe20 <TMU_Dispatcher+0x22>
						}
					}
				}
			}
			/*close the session*/
			gu8_Session=OFF;
 ed6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <gu8_Session>
 eda:	03 c0       	rjmp	.+6      	; 0xee2 <TMU_Dispatcher+0xe4>
		}		
	}
	
	else if (gs8_TMU_Init_State!=INITIALIZED)
	{
		TMU_Dispatcher_Error=ERR_NOTINITIALIZED;
 edc:	ce ef       	ldi	r28, 0xFE	; 254
 ede:	01 c0       	rjmp	.+2      	; 0xee2 <TMU_Dispatcher+0xe4>
				  takes the corresponding actions						  *
 **************************************************************************/

ERR_STATUS TMU_Dispatcher ()
{
	ERR_STATUS TMU_Dispatcher_Error=ERR_SUCCESS;
 ee0:	c0 e0       	ldi	r28, 0x00	; 0
		/*DO NOTHING*/
	}
	
	return TMU_Dispatcher_Error;

}
 ee2:	8c 2f       	mov	r24, r28
 ee4:	df 91       	pop	r29
 ee6:	cf 91       	pop	r28
 ee8:	08 95       	ret

00000eea <__mulsi3>:
 eea:	db 01       	movw	r26, r22
 eec:	8f 93       	push	r24
 eee:	9f 93       	push	r25
 ef0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__muluhisi3>
 ef4:	bf 91       	pop	r27
 ef6:	af 91       	pop	r26
 ef8:	a2 9f       	mul	r26, r18
 efa:	80 0d       	add	r24, r0
 efc:	91 1d       	adc	r25, r1
 efe:	a3 9f       	mul	r26, r19
 f00:	90 0d       	add	r25, r0
 f02:	b2 9f       	mul	r27, r18
 f04:	90 0d       	add	r25, r0
 f06:	11 24       	eor	r1, r1
 f08:	08 95       	ret

00000f0a <__udivmodsi4>:
 f0a:	a1 e2       	ldi	r26, 0x21	; 33
 f0c:	1a 2e       	mov	r1, r26
 f0e:	aa 1b       	sub	r26, r26
 f10:	bb 1b       	sub	r27, r27
 f12:	fd 01       	movw	r30, r26
 f14:	0d c0       	rjmp	.+26     	; 0xf30 <__udivmodsi4_ep>

00000f16 <__udivmodsi4_loop>:
 f16:	aa 1f       	adc	r26, r26
 f18:	bb 1f       	adc	r27, r27
 f1a:	ee 1f       	adc	r30, r30
 f1c:	ff 1f       	adc	r31, r31
 f1e:	a2 17       	cp	r26, r18
 f20:	b3 07       	cpc	r27, r19
 f22:	e4 07       	cpc	r30, r20
 f24:	f5 07       	cpc	r31, r21
 f26:	20 f0       	brcs	.+8      	; 0xf30 <__udivmodsi4_ep>
 f28:	a2 1b       	sub	r26, r18
 f2a:	b3 0b       	sbc	r27, r19
 f2c:	e4 0b       	sbc	r30, r20
 f2e:	f5 0b       	sbc	r31, r21

00000f30 <__udivmodsi4_ep>:
 f30:	66 1f       	adc	r22, r22
 f32:	77 1f       	adc	r23, r23
 f34:	88 1f       	adc	r24, r24
 f36:	99 1f       	adc	r25, r25
 f38:	1a 94       	dec	r1
 f3a:	69 f7       	brne	.-38     	; 0xf16 <__udivmodsi4_loop>
 f3c:	60 95       	com	r22
 f3e:	70 95       	com	r23
 f40:	80 95       	com	r24
 f42:	90 95       	com	r25
 f44:	9b 01       	movw	r18, r22
 f46:	ac 01       	movw	r20, r24
 f48:	bd 01       	movw	r22, r26
 f4a:	cf 01       	movw	r24, r30
 f4c:	08 95       	ret

00000f4e <__tablejump2__>:
 f4e:	ee 0f       	add	r30, r30
 f50:	ff 1f       	adc	r31, r31
 f52:	05 90       	lpm	r0, Z+
 f54:	f4 91       	lpm	r31, Z
 f56:	e0 2d       	mov	r30, r0
 f58:	09 94       	ijmp

00000f5a <__muluhisi3>:
 f5a:	0e 94 b8 07 	call	0xf70	; 0xf70 <__umulhisi3>
 f5e:	a5 9f       	mul	r26, r21
 f60:	90 0d       	add	r25, r0
 f62:	b4 9f       	mul	r27, r20
 f64:	90 0d       	add	r25, r0
 f66:	a4 9f       	mul	r26, r20
 f68:	80 0d       	add	r24, r0
 f6a:	91 1d       	adc	r25, r1
 f6c:	11 24       	eor	r1, r1
 f6e:	08 95       	ret

00000f70 <__umulhisi3>:
 f70:	a2 9f       	mul	r26, r18
 f72:	b0 01       	movw	r22, r0
 f74:	b3 9f       	mul	r27, r19
 f76:	c0 01       	movw	r24, r0
 f78:	a3 9f       	mul	r26, r19
 f7a:	70 0d       	add	r23, r0
 f7c:	81 1d       	adc	r24, r1
 f7e:	11 24       	eor	r1, r1
 f80:	91 1d       	adc	r25, r1
 f82:	b2 9f       	mul	r27, r18
 f84:	70 0d       	add	r23, r0
 f86:	81 1d       	adc	r24, r1
 f88:	11 24       	eor	r1, r1
 f8a:	91 1d       	adc	r25, r1
 f8c:	08 95       	ret

00000f8e <_exit>:
 f8e:	f8 94       	cli

00000f90 <__stop_program>:
 f90:	ff cf       	rjmp	.-2      	; 0xf90 <__stop_program>
